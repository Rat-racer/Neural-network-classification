node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 458
          }
          dim {
            size: 30
          }
        }
        tensor_content: "{\024JA{\024\246A\315L\244B33\360C\207m\313=k\232\367=\254\034\332=\303\236v=\374\2511>)\313\220=\016O\257>\264\310\346?\006\201-@\n\327\243Aw\204S<q\217%=\335\357P=\243\001\274<\360\242\257<J\t\301;\256GUA\217\302\313A\000\000\262B\232\331\003D\357\311\003>fff>\034\353b>\323M\342=A\361c>\024\313\255=\366(dA33\235A\366\250\303B\232y\035Ds\200\240=\301\250d>\354\300\231>\372\263\237=V}.>\357\033\237=\354\300\271>R\270\276?7\211Y@\000\000\352A\330\232\255;|~\230=\252\361\022>\271\302\273<\3544\322<\021\252T<\315\314tA\n\327\275A\000\000\326B\000@1D\210F\267=}\256\326>\022\245-?\254\034\032>\"\216u>\366\227\335=\366((A\037\205\241A\256G\211B\232\031\247C\035\311\345=]m\005>\344\240\204=\240T\373<\024\320D>\030`\237=\237\315\252>{\024\356?\276\237\002@\256G\237AU\244B<%z\031= \014<=\016\370|<\336Y\273<m\217\336;\\\2172A\000\000\266Aq=\221B33\273C\270\036\005>N\321Q>\246\233\004>\240T{=\352\004t><\332\270=\262\235\013A\256G}A)\\_Bf\346fC\037\205\353=\334\364\247=)?)=4\235\235<\214\333(>\347R\234=\372~*>O\036\026?\337O\255?\274t\017A%Y\007<\371I\265<\030}\005=\303d*<[\353\213<\026ny;J\014\032A\303\365\234A\303\365\200B33\216C\240\2110>\327\022r>\221~{>=\n\327=\253\317\225>\027H\320=H\341>Aq=\254A\\\017\231B\315L\333Ct\014\310=]\277\240=\234P\010=\320~\244<\350\331,>\314\264}=@\244\237>\0216l?\000\000\000@\354Q\306AO\260\377;\232_\315<\275R\226<\216\254\374;5cQ<\362\264|;R\270ZA33\321A{\024\257B\000\300\021D\232\231\031>X\250u>>\350\031>\'k\224=\265\246y>p\353\256=33\017A\366(|A\303\365jB33uC!\310\301=\000\221\376=\314\264\275=E\022\275<\313\241\005>\300\262\222=\300[\240>1\231z?\205\353Q@\037\205\207A\275R\226<\336q\212=\314\264\275=E\022\275<\033L\303<\230\210\267;\276\237\026A\\\217\210A)\\}B\000\000\207C\216u\361=\334h@>\t\033\036><\210\035=0*)>\205%\236=\205\353mA)\\\205A\256G\305B\000\240*DD\372\355=\214\333(>V\016->8\276\266=v\340\\>\320\233\212=Qk\332>\034\353r?\307K?@R\270$Bm\342\344;\001\366\321<?\251\366<\233=P<`<\203<\265\212~;\341z\226A\303\365\332A33\376B\000\340\210D\245N@>B`\345>E\330\360>\227\220O>P\215\267>\254\034\332=\341z|A\256G\267Aff\323Bf\246CDD\213\354=\241g3>QkZ>B!\302=b\241V>\216#\226=\337O\r?L7\211?\242Ef@\037\205jB@\206\016<b\333\"=F\266s=\323\274c<\330\360t<n\025\304;\037\205\241A\000\000\364A\315L\002C\000\000\237D\266\363=>\366(\374>HP<?\027HP>\371\240\247>n4\000>\232\231\217A{\024\240Aff\344B\000\200uD\256\022\254=\244\252\211=S\\\225=P6e=u\002Z>\362\322M=\037\364\014?Zd\233?\027\331V@\366(XB\302\333\203;n\374\t<\301\255\273<l\230!<\232_M=\210L\371:\327\243\244A\327\243\336A33\001C\000\240\235D\254\213\333=k+\366=0Lf>!\260\362=Z\365\371>{Nz=\\\2176A\270\036-A\024\256\222Bf\246\311C\204\365\277=\247\350\210=\375\331\017=L\340\326<h\263*>scz=\340-\020>\337\340\353>\033/\215?\000\000(A1\353\305;\350\202z<\303\rx<h\256\323;r3\\<\212\222\020;\270\036MA\037\205\177A\341z\247B\000@\377C\344\203\036>j\274t>\253>W>\270u\267=Qk\232>\021\215\256=\256G\225A\303\365\210A\315\314\362B\000\240\206D\365\333\327=\256G\341=a2\025>\216u\261=\203QI>\007|~=\020z6?5^\312?\327\243\234@\244\360\264B@\276\004<*\035\254<i\343\010=g\'\203<\302\206\247<\360\277\225;\000\000\262A33\307Aff\021C\000\240\301D>\350\031>1\231j>\302\206\247>\350j+>=,\224>\313-\255=\000\000\302A\232\231\241A33&C\000 \334D=,\024>X\312\222>\210\205\332>_\007N>\236\357\207>I\327\214=\351&\301?\024\256G@y\351\034A\000\000iC\216\036\277<\256\323\310=\001\336\002>\034B\225<\300>:=\301\312!<\366(\320A\205\353\277Af\3464C\000\220\001E\237\253->\365J\331>\212\216\024?\3711f>f\367\244>:\006\244=\000\000hAq=.A\\\217\274B\315, D\034|\341=@\023\341=\214\025\265=\271\252l=\355\r>>\353\034\203=\375\366\225>Zd[?\264\310\366?\037\205\301Ai7z;R\017Q<\354\027\354<\246\233D<\232w\234<l\0068;33{A\024\256\177A\232\231\315B\000`:D\202s\006>Y\0277>o\022\203>\221\017\372=\263\352\223>\177\366\243=\205\353UA\270\036\203A33\254B\000`\nD\027\267\221=\031\004\226=c\271\245=B`\345<\340\234\021>\225\202n=g\325\'>\205\353\221?D\213\234?\\\217jA,\364\301;o\360\005=\352\tK=\340\020*<1\353E<\367\217\205;\366(dA\000\000\266A\341\372\267Bf\006\036D\205\353\321=S\226\201>\236^\251>\224\336\267=\027\267Q>\2608\234=\232\231]A\024\256\211AH\341\260B\315,\023D\263\352\263=\240T{=\036\247h<\002\361:<\013F%> Aq=w\276_>_)[?)\\\277?\256G\217A5\263\226;\2239\026<j\211\025<\302\276\235;\371NL<\370\336\337:\n\327wA\327\243\274A\232\231\310B\232y5D\037\364\354=q=\n>\3711\246=R\017Q=\327\022r>]\026\223=\217\302YA\037\205\305A\037\205\257Bf&\017D\225\232\275=\206\003\241=>yX=$\271\374<\217S4>\265\025{=D\213l>\327\243\200?\211A\340?\327\243\236A\241\364\205;!Y@<\332 \223<\237q\341;\244\302X<>\005\300:\270\036\207A\\\217\016Bff\342B\315,TDb\241\026>*\251\223>\356Z\302>\360\026\010>\374\251\261>\301\312\241=\000\000\230A\256G\227A\315\314\366B\000@\216D\277H\250=\327i\244=\276\336\275=_{f=9EG>,\232N=\240\2110?\250\306\253?y\351\246@\303u\242B\302\030\221;9\271\337<xz%=z\374^<0L\246<\232\0070;\\\217\262A\n\327\315A33\024C\000@\300D\316\031\321=g\325g>\3122\244>Gr\371=\216u\221>\256\365\205=\232\231qA\270\036\203A\366(\307B\000\240(D\037\205\353=l\t9>\371\017\351=\275\306\256=\004\347L>\264q\204=\355\236\334>9\264\210?\252\3612@)\\\037B\347\215\023<\350j+=`<\003=\261\371\270<\375\301\300<\323P\243;H\341\200A\327\243\222A\315\314\323Bf\246>D)\355\r>\017\234\223>9\264H>\027\267\021>\246\233\204>]P\237=\354Q\236A\303\365\310Aff\002C\000\000\225D;\337\317=\256\266\">\323M\202>\261P\353=\034|a>scz=\366\227\375>\325x\231?\303\3650@\354Q}B\335\353\244;;6\002=\312\303B=\227\342*<\017E\201<\277IS;=\n\265A\354Q\006B3\263\024C\000\240\306D\\\217\002>\346\256\305>\223:\021?W[1>L7\251>\373\\\255==\nCA\327\243TA\366(\236Bf\346\343C\032Q\332=\214\276\302=\261\341\351<\354\027\354<\022\203@>\255\206\204=\337OM>\t\371P?D\213\374?\n\327sA\013\360\335;\0162\311<\004\312&<\262\234\004<0\022\332<\001\302\207;\244pUA\341z\216A\217\302\266B\315L\010D\363\037\022>\035Z\204>(\017\313=u\253\247=\340\234\261>tA\275=)\\wA\n\327\233Aff\313B\2329;D@\244\337=lx\372=O\036\026>,\237\245=\002\274E>wgm=s\327\362>\2760I?\031\004F@q=AB\352x\314;y#s<\343p\346<\276\0233<m\342d<\273H!;{\024\232A\000\000\320A\315\314\371B\000\200\220DvO\036>F%u>e\031\302>\232\010\033> A\221>\250:\244=\256G\201A\354Q\254Aff\324B3sJD;p\316=J{\003>=\233\325=\222\350e=\033/]>\235Kq=d\314\335>\205\353\241?\031\0046@R\270.B>\317\237;h\350\237<\316\307\265<\237=\027<\221~{<U\204\033;\217\302\233A\244p\375A3\263\001C\000\340\222D\027\331\016>\177j\234>\2760\231>KY\006>\016-\262>\201\t\234=)\\{AH\341^A\000\000\314B\315l>D!\310\301=!\310\301=\363\037\222=\004\004s=Z\3659>\001jj=$\227\237>\234\304P?\177j\374?\037\205\337A^\363\252;\2657x<6v\211<\306\277O<x\271\210<\352\262\030;\000\000\214A\000\000\232A\232\231\344B3\263fDlx\372=\336\223G>i\000/>\226\262\014>\350j\213>h\320\220=\232\231\223A\256G\257Aff\360B\000`\206D\\ \301=\037\327\306=h\"\354=\000:\214=\304B->\363\223j=\347\214\030?#\333\231?%\006q@3\263\210B\t\244\304;\001\373h<\261\341\351<~\341\025<\004st<\303\201\020;\366(\264A\270\036\373A\232\231\021C\000\300\306D\031\004\026>\303\365h>\014\002\313>\2505\r>I.\237>Q\332\233=\354QLA\217\302\263A\244p\243Bf&\375CGr\271=w\370k=j\366@=\375\202\335<\323M\">\"lx=|ar>\327\243\260?\372~\272?\303\365\236A,\272\365;\211\357D<\226\t\277<1%\022<\030\354\206<MK,;\n\327gA\341z\005B{\024\270Bff#D<N\021>\210\364\033>\300\354^>P\031\277=E\330\220>P6\245=)\\;A)\\\205A\244p\225B\315\314\323C\253>\327=\265\246y=\332 \023=\364\375\324<\025\035\t>\330\201s=9\326\345>\022\203 @\022\203P@\341z\tBC\214\327;e\031b<0\022\332<\216#V<\227\250^<$\361r;\256GUA\n\327\313A\354Q\254B\315\254\010D\201&\002>\316\210\322=\2068\326=c\264\216=\016O/>xb\226=H\3416Aq=vA\270\036\222Bf\346\307C\037h\305=3\026\215=\236{\017=\037\205\353<\305\2171>\373:p=!\0374>\255i~?\323M\222?R\270JA\2722\250;]3y<R\362j<g\357\014<\201\354u<p$\320:\270\036EA\366(\260A)\334\237B\000\000\347CF\266\363=U\301(>\362A\017>\247\226\255=\336\002\211>\025\214\212=33oA\\\217\214A3\263\301Bf\206)Di\000\357=\313\241\005>\366\227\035>\231\236\260=\225eH>|\233~=T\343\245?#\333\271?9\264\006A\315\314\313B\n\327#<r\212\016=l\262\206=:u\345<h\256S=\3233=;ff\224A\244p\253A\315\314\362B\232\331rD\205|\020>\366\227]>\250\306\253>h\263*>\373\313\256>\335^\222=\341z4Aq=VA\000\000\222Bff\300C c\356=\036\247\350=\177\331==\264qD=\264Y5>\211\265x=\304B\255>m\347\253?\221\355\354?\327\243\322A\316\2458<0G\017=\267(\263<\t\371\240<\000o\201<-\223a;R\270>A\354Q|A\\\017\231B\000\000\331C\026\373\013>\243\222:>\207\212\261=qZ\260=\253>W>\263\357\212=\331\316\033A\037\205?A\303\365tB\000@\220C\244p\275=\226\004(=\000\000\000\000\000\000\000\000\001\336B>\306\205\203=:\222K>\266\363\375>m\347\233?\366(DA1\353\305;\370U\271;\000\000\000\000\000\000\000\000\'\210\272<\243\006S;\205\353)A\232\231aA\\\017\205B3s\253C$\271\374=\265\211\223=\000\000\000\000\000\000\000\000\333\371\236>\267\356\246=H\341\200Aff\220A33\322B\000@KD\t\026\307=\214\333\350=}y\301=\337ls=\000\221>>\007\353\177=Tt4?\372~\252?V\016\221@\366(\224B\340\326\335;\316\302\236<\247?\373<\2073?<\232\231\231<\366\014a;)\\\237A\366(\312A\000\000\001C\000 \232D\271\215\006>f\367d>`v\217>l\t\371=M\363\216>j\023\247=H\3416A\341z\212A\354Q\223B\000\000\307C@\244\337=\366E\302=(a\246<\000t\230<\260r(>\307c\206=\305\217\221>X9\364?\236\357\367?=\n\253A\257]\332;\226!\216<\n\272=<\306\371\033<\002\361\272<w\024g;\341zLA{\024\326A\354Q\245B\000\200\373C\362\260\020>4\2007>\036\334\235=\353\034\203=\001M\204>[\316\245=ffNAR\270~A\341z\247B\315\014\000Dx\264\261=\214\276\302=OuH=\016\370\374<4\0216>\267b\177=vq[>]mE?\'1\330?\270\036\205A\363t\256;|\n\200<\376ew<4\203\370;\024\\\254<7U\367:\024\256gA\\\217\256A\nW\302B3\363 DKY\006>%u\202>\031\004V>\362A\317=t\265\265>\263A\246=\000\000,A\037\205oA\037\205\210Bf\246\261C\304\231\237=R~R=\344f\270<%\006\001<\362A\017>\001\373h=\256G\201>\215\227\236?\002+\347?\205\353\215A7\210\326;G\346\221<\207P\245<\336\344\267;i\343\210<;\252\032;33?A\217\302\245A{\224\233B\232\231\334Cd]\334=lx\372=K\310\307=\346\313\013=\037\205k>\016\241\212=ff>AffjAR8\234Bff\330C\372\355\353=\335\265\004>+\366\027=y\001\366<\272IL>\360\212\240=\272\332\312>p_\'?\020XA@q=\310A\022\240&<\3750B=\222y\344<\306\3345<\371\024\000=\355b\032<ffRA{\024\204A\037\205\254B\315\314\376CN\321\021>\323\336\200>\356\353\300=\366zw=V\237\213>=,\324=\315\314<A\327\243\204A\341\372\235B\000\000\330C\322o\337={\024.>\261\341)>\365\333\227=\025\035\211>E\365\226=\270\257\243>+\207\266?\347\373\021@\217\302\305A\372\324\261;\304\316\024=Ll>=\203\372\226<\333\205f=3\341\227;\n\327[A=\n\323A)\334\267B\315\354\023D\362\322\r>\252\202\321>\324\232\346>\333\371>>}\320\023?\252\361\322=33oA\366(\226A\024\256\303B\000`,D\217\252\246=i\000\357=\020X\271=G\346\021=\352\2252>\005\372\204=b\020\330>\035Z\364?\020XQ@R\270\035B\n\272\275;\r\303G=\3745Y=\006/z<6v\t==|\031<\000\000\202A\217\302\313A33\326B\315lJD\203/\314=@\023\201>\000\000\200>h\"\254=\274\005\222>\336\310\274==\ngAH\341rA\244\360\273Bf\006 D\203/\314=\316\031\321=S\320\255=9\227b=\240\2110>\350\023y=\331_v>RI=?\024\256\007@\232\231\251Af\371\272;\225+\274<P\031\377<\365\234t<.9n<\315\254%;\232\231}A\315\314\236A33\331B\232\271?D\'\302\006>1\010\214>\244\337\236>\323\274#>z\307\211>\014Y\235=\n\327[A\256G\217Aq=\260B\000@\022Dp\261\242=\232\224\202=\363\002\354<M\276Y<\320\325\026>\212\216d=\000\000\200>\367\344A?\020X\311?\217\302\253A\275\3759;\251j\202<N\321\221<\317\370\276;M\276Y<\307\177\001;\244puA\024\256\263AHa\302B\232y5D\234\341\306=\021\307:>R\' >\312\211v=\327\243p>\217\245\217=\000\000PAq=\246A\037\005\247B\232\331\001D\260r\350=7l\233=Xs\000=\254\255\330<J\014\202>\322Ry=t$\327>L7\251?;\3377@\270\036\013B\335\356\345;\364\032;<~\251\237<S\350<<\365\276\361<\362\356\310:\\\217bAH\341\300A\327\243\265B\315,\032D\024\320\004>\323M\342=>\"\246=,\361\200=\234\242\243>\357\311\203=\006\201\003A\232\231\245A{\024UBf\346KCI\235\300=\313\241\005>9E\007>A\232\261<f\210c>o/\251=\335$F>\321\"\373?\240\032\237?)\\#A3\247K<\340\326]=\014\310\236=\311q\'<=\'\275<\347\000A<\325x\021A\217\302\355A\354QhB\315\314yCy\351&>\010\254\334>\354\300\t?\247\\\241=\036\026\252>\231*\030>-\262\033A\244puA\270\036\177B\232\031\226C\254\213\333=\323\274#>aT\322>O\351\240=%u\202>\320a\276=o\022S?\372~*@\004V\202@ffGB\204\2733<?R\304=\203\300\312>T:X=\201>\021=\004s\364<\354Q0A\205\353\233A{\024\216B\000@\276C\001M\004>)\355\215>aTR?\323\336 >-!\237>\356\353\000>ff2A\256GQAq\275\215B3\363\276C\r\303\307=\261mQ=\215]\242<\"O\222<Zd;>\221\017z=\235\200f>b\020H?y\351\266?\024\256wAn\304\023<\3225\023<\340\363C<\203\337\006<\375\237\303<\2404\324:\n\327?Aff\202A\000\200\230Bff\334C\203Q\t>\340\271\267=V\274\221=\230\206a=|a\222>\311\260\212=ffRA\244puA\270\236\252B\232\271\006D0/\300=\377\t\256=\025R\276=\347\251\016=\243\222:>\035=~=\203\300\212>c\356J?\376\324\350?\354Q\266A\350\243\014<\216;\245<9\234\371<\342<\034<$\326\342<\357\377c;\354QlA\000\000\244A\nW\303B3S)D\342X\027>\260\003g>\221\017\232>H\033\307=\235\021\305>\310\315\260=\000\000DA\037\205\217A=\212\234Bf&\346C\342;\261=2\311\210=-!\037=\235\364\276<^\272I>P\031\177=\256Ga>\003x{?\266\363\275?{\024\204AW\320\264;\007\353\177<6Y\243<\252\323\001<\304_\223<\233\312\";\244pYA\217\302\311A33\255B\315\014\rD\331=\371=Y\0277>\224\366F>J)\250=\267b\237>\032\213\246=\244p\215A\205\353\245A\315\314\352B\315\354pD\035Z\344=\372~*>\266\363=>\365\333\327=\225\324I>2\217|=[\261O?33\263?\256G\261@\354\321\273B\355\017\024<t\352J=\336<U=\221\320\226<]\247\221<\233\312\242;\217\302\243AH\341\310Af\346\004C\000\300\242D\0054\021>\374\030\263>\031s\267>\321\"\033>\0216|>hy\236=R\270\206A\024\256\233A\315\314\330B\315\014\\D>y\230=R\355\223=\252\361R=\025\000\343<[\323<>\374\306W=a2\365>\n\327\003@\360\247^@\244p:B\364\243a;7\375\331<\367X\372<\306\3345<l\ty</\031\307:\217\302\221A\\\217\340A\232\231\360B\000\000\201D\007\261\263=\240\032/>\200\267@>\360\304\254=\345a\201>\365\234t=\303\365@A\n\327KA\024\256\231B\315L\340Cu\260\276=\336\253V=\326\213\241<\030\317\240<\345\320\">b\363q=\243\222:>\372~:?T\343\225?\000\000TA:$\265;\013b <\342\254\010<\275\215\315;\216\006p<[\316%;q=RA\256G\223A\366(\250B33\005D\\\217\002>HP\374=\203\335\260=;\337\217=\200\267\200>D\300\241=ff.A)\\OAHa\211Bff\267C>\350\231=\016J\030=\231\201J;&\340\327;*\251\023>\270;k=\027H\220>\034\353B?\213l\347?\354Q\224A\325B\311;\271\377\310;b\204\360:S[j;a\032\206<H\247.;\217\302EA\232\231\221A\327#\234B\000\000\353C \322\357=r\334\251=3\341\227<6\352!=\203/\214>\210c\235=\000\000<A\244p\241A33\230Bf\346\321C\367\006\337=C\255\351=\007%\214=\305\033\031=M\025L>N(\204=\367u\000?9\264\330?\226C{@)\\\031B\337\214\032<\201\004\305<)\256*=b\276<< $\013=\277\326\245;\270\036UA\024\256\321A\354\321\261B\232\371\007D(\017\013>\245\275A>^KH>\360\371\241=\2343\242>\342\222\243=\037\205\231A=\n\177A\232\231\374B\000\240\220D\231\r\262=!\260\362=\217S\364=\354\372\305=EG2>K\002T=\000\000\200?\2343\"?o\022\337@\232\231\356B\240\033\032<\376C\372<$\3561=m\342\344<\017E\001=\000U\\;q=\260A\341z\216A\232\231\022C\000\340\272D\3711\346=;pN>g\325g>\375\3665>\307)z>>\005\200=R\270\234A33\221A3\263\002C\000\300\227DB`\345=1\231*>\334h\200>\270\257\003>\227\220O>d\036y=\266\204<?\335$\206?\020X\231@\327#\302B\225\360\204;\'\210\272<!\007%=\310{U<\374\035\212<\315rY;\n\327\325A\270\036\323Af\346.C\000\200\013EO@\023>K\352\304>\004V.?\302\027f>\210\205\272>\025\343\274=\244pEA\217\302\261A3\263\237B\000@\350C\362A\317=;\337\317=\210\364[=\241-\347<\211\322\036>\035w\212=\"\375\226>\317\367\323?q=\372?ff\254Ah\3139<J\014\002=\000\000\000=Z\3659<|\355\231<G>\257;\256GYA\244p\345AR\270\256B\000@\nDO\257\024>Dio>\350\331,>)\320\247=B>h>\326\377\271=\366(\272A\354Q\260A\232\031\030C\000\300\322D\252\324\254=\372~\352=\336\223\007>l\262\306=\"l8>msc=\003\t*?_)[?\307K\223@3\263\303B\021\344\240;\214g\320<\241-\347<\307\364\204<K<\240<\312\032u;{\024\340A\217\302\341A338C\0000\026E\221~\373=\031s\267>:#\312>\373:p>\276\301\267>W&\274=\037\205oA{\024\236A\000\000\277B\315\214,DKv\254=\3127[=\215\177\237<\307\327\236<\321\"\033>\003\262W=\177j<>\354Q\210?\246\233\244?\270\036\205Ag(n;!\313\002<\201v\007<\207\303\322;4\235\235<\275:\307:\024\256\177A\\\217\316A\232\231\314Bf\206CD\031\004\326=\226\262\314=R\270\236=\020\257k=\247y\207>\331=y=\315\314,A)\\\033A=\212\211B\315\314\262C1|\304=R\362j=\353V\317<\244\031\213<\026j\r>o\022\203=|\3620>\251\023\320>\305 \220?\024\2567A\244\342\377;J\323 <g\0174<\271\034\257;\222tM<\263\357\n;\232\2319A\354Q@A\354Q\223B\000\000\317C\341\013\023>\200\267\000>\364l\326=\364\211<=\031\004V>\357\254\235=q=\206Aff\226A\232\231\332B3\223]D\"\216\265= \014\274=\211{\254=.\255\206=\334\327A>2\254b=\020X\031?J\014\262?\305 \204@\024\256\206Br\243\310;\250W\312<6\037\327<Qf\203<sK\253<\321\352d;ff\240Aff\322A3\263\002C\000\200\235D\3274\357=P\374X>\373\\m>\007\360\026>;\337\217>\211\007\224=\217\302\213A\244p\305A33\350Bf&vD\320\325\326=\257%$>\344\024]>=\233\325=\277}\035>\356Z\202=\226C\213?\341z\264?\264\310\352@\232\231\364BDO\312;@\331\024=\3377>=Q\210\200<\310\230;<\254\305\247;\270\036\271A\354Q\001B\315L\033C\000\200\317D\004\347\014>\223\030\304>5^\372>\373:0>\033/]>\311v\276=\037\205oA\232\231\207A\244p\300B\232y+D\225\324\311=\034|\241=\345\'\325<\251\336\032=\242E6>\213lg=\325\347\212>\250\306\233?\323M\362?q=\302A!v\246;\367u`<\203k\356;\354\246\024<\033/]<\334\233\337:H\341\200A\000\000\270A33\321B\315lFDl\t\371=\371\240\'>\253&\210=\326\305\255=k+v><\245\203=\270\036EAq=FA3\263\235B\315\014\350C\316\210\322=\214\370\216=\272N#=P\215\027=\002\232H>\263\352s=\374\251q>\303d*?\217\302\325?\244p\213A-\317\003<\312TA<\021\337\211<PSK<4\235\235<.S\023;\000\000XAq=zA\244\360\255BfF\tD\362\322\r>n\243\001>\222\\\376=\343S\300=\016\276\220>\212\253\212=H\341VA=\n\235A\024\256\253B\232Y\rD\224M\271=;\307\200=\225\361o=\013\322\014=\234\242#>\277Hh=\205|\360>\345\320\222?\207\026I@\232\231-B\320\264\304;t).<\2755\260<\320\266\032<l\ty<\256\327\364:\n\327\217A\303\365\356A33\351BffxD`v\017>vO\036>p_\207>h\221\355=*\251\223>E\365\226=)\\wAq=>A\000\000\315B\23298D\200\267\000>d;\037>\251\023P>e\252\340=\203QI>\353\305\220=4\200\327>Y\206(?\037\2053@\\\2172B\303\267\260;\346\"\276<:@0=\320DX<\367\314\222<\270\223\210;\354Q\226A\354Q\210A\000\000\372B\000\300\211D?\306\034>\031s\267>}?\025?\265\025;>\301\250\244>\027\331\316=\256G1A)\\kA\205k\214B\232Y\272C_\007\316=\270;k=\264\223\301<p\231\323<\300[ >\304\224\210=tFT>=\n\347?\211A\260?\327\243\230A\312\032u<\230\300\255<=\017n<\353\255\201<:z\374<}\313\234;\232\2315A\\\217\206A\037\005\220B\000@\306Cl\t\371=U\301\250=\354L!=\257_0=\312\303B>.\305\225=\\\217*AffrA\341\372\206B\315\314\256Cg\017\264=\27550=\000\000\000\000\000\000\000\000]mE>j\274t=\272k\251>ff\366?\205\353\t@\n\327\257A\371\300\016<\022\240&<\000\000\000\000\000\000\000\000\002\274\005=\212U\203:\327\2438A\232\231\231Aff\222Bf&\314Cd]\334=f\024\213=\000\000\000\000\000\000\000\000\203\300\212>:z|=j\274\nA33gA\024\256YB33cCp%\273=\034%/=\000\000\000\000\000\000\000\0002U0> \265\211=\212\260a>~\214I?\024\256\267?\217\3025A(F\026<\313/\003<\000\000\000\000\000\000\000\000\312\025\336<\302\301^;\'1\024A\354Q\210A\244piB\232\231\201CD\372\355=\001\207\220=\000\000\000\000\000\000\000\000\335\265\204>\037\272\240=\311v\036A\341z\220A33\201B33\227C\261\242\306=o\201\004>9\326\005>\0265\030=\325\347*>77\246=$\271\334>9\264\020@\260rH@\n\327\333A\300\262R<Ic\264=F%\365=\360\205\311<\300\354\036=\367\314\222<\366(4A\270\036\303A\327#\222B\232\031\303C\3578\005>=\n\227>\263{\262>\361\364\312=9\326\205>D\372\355=\024\256\203AH\341\240A\232\231\332B\2329PD\301V\311=\233U\037>k\2327>`\223\265=\242\2647>\273~\201=\221~\233>\035Z\244?\027\331\036@R\270\374AN\'\331;\264\260\'=\004\377[=^\205\224<\031\312\211<a5\226;\354Q\216A\232\231\343A\000\000\367B\315LuD`\345\020>M\363\356>4\021\026?NbP>d]\234>\372\362\302=\366(PA\217\302\261A\037\005\244B\232\231\003D>\005\200=\316\302\236<R\017\321:\317\276\362:\027\331\016>xbV= A1>\016-\222?\221\355\214?\244peA\206\000`;J\226\023;R\017\321:\317\276\362:\020#\204<\203\325}:\000\000`A\366(\350A)\\\260B33\030Dff\246=!\223\014=\367\261\002<\020\263\027<\014\002k>LTo=\303\365LA\303\365PA{\224\242Bff\376C\207\371\262=B\225\032==\236\026<>\350Y<O\036\026>+5{=\263\352\223>\026j}?\201\225\343?\354Q\256A1\322\013<\032\211\320;\231\201\312;\317\276\362;V}.<s\234[;{\024ZA33\201Aff\255B\315\254\016DD\372\355=\367\006_=t\357\341</n#=F\2246>\244\344\225=\217\302\331A\303\365\256A\232\0316C\000\240\014E\033\r\340=]\376C>\305\376\222>\245N@>\354Q8>\326Vl=\246\nV?h\221\275?q=\272@3\263\000C\245\277\227;\277\324\317<u\260\376<PSK<%\006\201<\003\0074;\341z\004Bff\003B\315\314\\C\000\000IE\231\273\026>r\212\316>9\264\010?\'\240\211>*:\222>\365\204\245=R\270\250A\\\217\324A3\263\016C\000\340\243DC\255\351=\227\377\220>6\253~>\2760\031>}?u>\324\202\227=\223:!?jMC?}?\215@\205\353\242B\300\\\213;\273\355B=\335\230\036=_^\200<\313J\223<\256\201\255;\244p\325A\205\353\005B\000\2000C\000\220\002E\254\255\030>\201&B?h\221-?4\242\224>N\321\321>J{\003>33{A\341z\242Aff\312Bf\246?D\353\213\304=\0324\264=O\006\207=\234\212T=\346\256%>{Ic=\210c\275>33\223?\347\373\031@\205\353#B\263\225\227;\215b\271<Z\022\240<\304\005 <\342u}<\243@\037;H\341\240A\256G\003B\315L\001C\000\240\236D)\313\020>=\233\265>\030\225\224>d\314\035>r\371\257>L\303\260=\\\2176AR\270nA\\\017\223B\000\000\311C@\207\271=\260\003\247=|,}=\302i\301<i\000\357=\370\245~=z6\253>\362\322\215?\274t\363?\366(\266A\232\n\361;\352\262\030=EGr=>?\214<W[\261<\032\303\234;\205\353EA\232\231\215Aq=\236B\232\231\351C\257\224\345=/\335$>U\301(>,\361\200=Gr9>\337\032\230=\341ztA\256G\263A\n\327\305Bf\2461D\304|\271=\031s\327=\366(\\=\t\247\005=E\3300>F_\201=aTR>H\277\375>1\010\254?q=\234A\n\235W;\212\216d<zS\221<%\347\304;>\005@<U\301(;ff\216Aq=\340A\232\231\343BfFsD\3578\005>\247\350\250>#\333\271>\265\025\373=\\\217\242>l!\310=\256G!A\217\302qA=\n\177B\000\300\236C\305\311\275=\245N@=nR\321:m\214\035; c.>\340\271w=\020X\331>\323M\242?\037\205+@\244p\323A\t\304k<\246\233D<nR\321:m\214\035;\270\351\317<\361hc;\205\353=A\244p\251A\256\307\226B\000\200\332C\032\300\033>\362\260\320=+\301\342;\246\270*<k+\226>s\242\235=\341z\222A\327\243\224A33\355B\000 \202D\332\341\257=\265l\255=\026M\247=5$n=\213\375%>?5^=A\361\203>\363\216\363>u\223\350?)\\\347A\200\323;;\350k\026<\223Wg<\017+\334;\034%/<\253y\216:\341z\252AH\341\322A33\013C\000@\260D$\271\374=5^z>F%\265>\323\336 >\257%\244>\032\027\216=)\\;A\037\205\211A)\\\225Bf&\322C\351+\310=\r\211{=C\004\034=`\253\004=\010=\033>\265\246y=\177\373z>\317\367C?\333\371\336?H\341\216AWC\342;9\233\016<\253\t\242<\201&B<\371f\233<u\005\333:\366(PA\270\036\253A\n\327\250B\000`\002D\247y\007>\364\375\324=\032\300\033>@\023\341=\270\257\203>\270X\221=\303\365<A\270\036\213A=\212\226B3s\326C\315;\316=\314\321c=\375\301\300<\213q~<W\354/>\261\277l=\222\\>>+\207\366?sh\201?\037\205gA\230M\000<6\311\017<_\357~<\352x\314;\315\222\000=\033I\002;\270\036IA\n\327\323A\327#\237B\000\300\364C\272\332\n>\315\314\314=\023I\264=\257_0=\n\327\243>.\255\206=\315\314DAff~A\366\250\235B\232\331\347Cxz\245=\234\212\224=Cs\035=\345~\207<h\263*>\r7`=\263\352s>T\343U?\236\357\327?\\\217\222A\030z\304;\0015\265<\265l\255<\352\313\322;T\343\245<e\031\342:\232\231UAR\270\234A\315L\255B\315\254\010D\367u\340=\303\365(>\027\267\021>\3578E=$(~>\232%\201=\037\205cA\303\365\270Aq\275\274B\232y\030D\366(\334=Y\027w>\272\332J>a\211\207=!\037t>\315u\232=\230n\222>=\n\007@\002+\007@\217\302\375A\232\224\002<L\246\n>\373\313\356=\215z\210<\261mQ=>\005@<\n\327{AR\270\024B\315\314\324B\232\231>D\255\372\034>m\305n?\365JY?\353s5>\346?\004?\006\022\024>\354QLA\256G\253A=\n\244B3\263\375C\365-\263=@0\207=_\357\376<o\236\352<2w->\375\301\200=_);?w\276\337?\250\306\243@\232\231VBT\310\225;\005\243\222<\007B\262<\366\356\217<x(\n=\022\203\300;\000\000\\A\000\000\274A{\024\262B\000\340\020D(D\300=\224\336\267=\'kT=\210\200C=-!_>\324\267\214=\037\205\033A\217\302\221A\205\353rB\315\014\220C\004V\216=>\005\300<\000\000\000\000\000\000\000\000gD)>\331\010\204=a2\265>\354Q\234@R\270\016@\037\205\255A\276\206\340:\252\271\334;\000\000\000\000\000\000\000\000g\233\033=\342?\335:\356|\037A\327\243\246A\000\000yBf\346\227C\224\301\221=G\217\337<\000\000\000\000\000\000\000\000J{C>\rT\206=\244pEAH\341\326A\315L\242B3\263\356Ca\303\323=\025\214\n>?5\336=\n\334:=\224\366F>\334\021\216={\203\317>P\215\347?\207\026)@\217\302\tB\307\017\025<\277}\035=\352!\032=\301nX<\204\330\231</\334\271;ffzA)\\\035Bff\313B\2329@D\264\3106>|\362\360>\\\217\342>\317f\025>\246\233\244>\264\310\366=\217\302mA\024\256\271A\315\314\310B\232\331\'D\253\317\325=\203\300J>\326\305->J\322\265=j\3361>\177\244\210=\273\'\217>\275Rv?\362\322e@\232\231\311A,f\004<\020\314Q=t^c=_A\232<\205|\320<\255K\215;\327\243\200Aq=\336A33\355B\315,DD\'\302\006>D\372\355>\361\364\352>E\3300>\232\231\231>M2\262=\\\217NA\327\243\202A\\\017\245B\232\031\001D\266\241\242=\227\312[=Y\243\036=N\271\302<#J;>\315\036h=]\334F>\002\232h?\240\032\277?\000\000|A\330\232\255;\315\001\202<\346\"\276<\n\364\t<:\314\227<\222\010\r;{\024^A\000\000\260A\270\236\265Bf&\026De\252\340=\3436\032>4\2424>\036\247\250=,\324\232>\306P\216=\354Q\\A\354Q\262A\217B\265B\2329\023D\217\302\365=\245\275\001>\362\322\r>\t\247\205=6\315;>I\327\214=V}\036?\002+\007@\364\375\234@\315\314FBe\031b<S\"\t=\022\024?=U\301\250<kH\334<Y\031\215;\270\036\203A=\n\010B33\337B\232\271IDj\3361>\256\330\237>S\005\303>\261P+>-\262\235>\315#\277=\327\243\220AR\270\256A\315\314\352B\000\000\200DE\365\226=\370\374\260=\367\344\341=\271\252l=}?5>\365\271Z=\001\336\"?=\n\247?\347\373\211@R\270\230B\0015\265;\226\354X=\376Cz=\300\225l<\016O\257<\010\005\245;{\024\236A\232\231\305A\232\031\001C\000\200\231D\260\254\264=\336\002I>\301\312\201>\342\006\274=\352\225r>\317N\206=\244p\231A\205\353\263A\000\000\377B\000\200\217D\021\215\256=*:\022>\257%\344=\311\260\212=\330\3604>\304wb=\022\024\337>\020X\211?\337Ou@H\341XB\254\002\265;Wx\027=\357\254\335<t\014H<g\325g<4\240^;H\341\272Aq=\000Bff&C\000\000\323Dp_\007>\267b\017?T\343\305>2\346.>J{\243>\231\330\274=33gA\217\302\241A\341\372\274B\315\254 D\266-\312=\"\375\366=\374\251\361=\330\360t=\024\256G>vl\204=\2068V>b\241&?\207\026\271?)\\\233A\210\203\204;\204\323\202<\n\327\243<\001N\357;O]y<\307\177\001;\327\243\222A\303\365\360A\315\314\353B\000\200\202D\300\354\036>\316\252\317>vO\376>\0216<>\206Z\363>`v\317=\024\256CA\341z\234A{\024\235B\000\200\346C?R\304=,\237\245=\341\177+=\0049(=L\246J>\340Jv=\330\360\264>^\272\251?F\266\023@\205\353\331A\0008\366;V\274\221<3\212e<\021\307:<d@v<Y\302Z;=\ngAH\341\342A\315L\270B\232\231\037DaT\022>\316\031Q>;\001\r>\033/\335=\002\232\210>Mg\247=\354Q\214A\\\217\232A33\346Bf\346mD&\252\267=\264Y\365==,\324=\257Z\231=\3436\032>O\351`=\261P\313>\352\004T?\313\241E@\205\353\"B\237\216\307;\326s\322<\274?\336<d]\\<\232\224\202<\3271.;)\\\243AR\270\316A\000\200\013C\000\340\232D\026j\r>\240\032\257>\017\234\263>\271\215F>\342\351\225>\275\035\241=\354Q\272A)\\\325Af\346\036C\000\240\322DC\255\351=\317fU>\252`\264>T\343%>\256Ga>\315#\177=d\314\r?\024\256\307?\020X\225@\354Q\246BF\320\030<\224\301Q=\270u\267=\314\356\311<\016-\262<\322:\252;\303\365\310AR\270\002B\000\0001C\000@\370DRI\035>\264Y\325>\003\tJ?\372\355\213>\323\274\243>\035r\263=\303\365\\A\000\000\276A\270\036\267B3s\025D\247y\007>\017\0135>\t\212\037>\253\354\273=\235\200f>j\373\227=\274\226\020?=\n\367?\016-z@H\341RB\212\222\020<|\233\376<_\357\376<w\204S<\031\255\243<\021\247\223;\232\231\231Aff\'B\000\200\000C\000 \220DA\361c>\264Y\005?\r\340\355>\226!N>\034\353\342>\255i\336=\037\205GA\315\314\224A\024.\242B3\363\360CM\025\314=\254\255\330=A\361\243=\027\202\034=\270\036E>\340\204\202=\237\315\312>\313\241\205?\331\316\037@\354Q\362A\376\325\343;\223\214\234<\023D\335<\357\346)<@\373\221<\031\003k;\037\205oA\270\036\305A\232\031\300B\232y)D\274\005\022>\330\201s>U\301\210>;\337\317=\032Q\232>33\263=\205\353qA\244p\205A\\\217\305Bf&3D\316\307\265=\274\\\304=\276\237\232=j\023\'=\3019#>\302/u=\237\315\212>,e\271>\010\254\374?\037\205\323AwN\263;Y4\235<\356\010\247<\363T\007<@\207y<)\317<;\366(\216A\205\353\241Aff\353B\000`wD\254\255\030>\025\214\252>\250W\252>n4\000>\027\331\256>\247y\307=\031\004\036A\366(\212A\024\256{B3\263\223C\367\006\337=\202\034\224=\375\331\217<h\350\237<\246\nF>\200\267\200=,\324Z>\250\306\253?\016-\302?\256GEAq<\037<\333\242L<\223\251\002<\r\245\366;\017\013\265<G\001\";R\270&A\217\302\271A\366(\206B\315\314\245C`\345\020>\267b\377=\007|~=m\342d=l\t\231>t$\227={\024\210A{\024\242Aff\333B3\023bD\213\246\263=\377\225\225=\004V\216=?\306\\=`vO> \357U=\375\366\025?\177\373Z?Zd\203@\205\353\210B\317\025\245;d@v<\224j\237<\t\3767<\253\354\273<\377%);ff\236Aff\310A\000\000\002C\000@\227Df\210\343=\231*\030>9\326E>\367u\340=\024\256\247>1|\204=\217\302QA\354Q\264A=\n\256B\232Y\004D\2505\315=\365\333\027>EG\262=Y\372P=\244p=>t\265\225=\002\274E>\332\033l?\027\331\276?\244pqA\225\020\254;d\036\371<\017\356\316<\200\r\010<g\362\315<`\217\211;\315\314hA\256G\351A\303\365\306B3\323\037D:#\n>\345a\341>\367\344\241>\324\232\346=\206Z\323>d]\334=\354QtA\\\217NA\nW\304B\000`5D?\221\247=I.\177=\031Vq=\213O\001=_)\013>OXb=\210\205Z>\354\300\271>33\303?\000\000\240A\204\233\214;\231\201J<\221\320\226<5\231\361;wI\034<$\016\331:=\n\213AR\270~Aff\343B\315,iD\376C\372=\256\330_>\207\247\227>\317\367\323=h\221m>I\021\231=\327\243\244A\270\036\261A3\263\006C\000@\241D\307)\272=\003\t\n>\236\357\'>-\317\303=j\2744>u\310M=\203/\\?\244p\275?\221\355\340@ff\337B\207\032\005<\024\350\023=V\324`=A\202\342<\306\026\002=\036\376\032;\205\353\271AR\270\336A\315L\036C\000\000\317D A\361=\006\201\225>\346\256\305>\246\233D>\330\360\224>\373:p=\244p=A\037\205\227A\037\005\227B\000\000\326C\227\255\265=\337O\215=\375\244\332<\250:d<\255\372\034>@\030x=f\210c>\277}]?\376\324\270?\303\365\210A\363\307\264;\321y\215<\302\206\247<\360\025\335;\372a\204<\006\177?;\315\314TA\205\353\307A\244p\252B3\223\010Do\022\003>\022\203@>b\241\026>\010\224\215=\301\312\201>W\262\243=H\341\340A\217\302\223A\000\200<C\0000\034E\261\341\351=\010=\033>&\344\243>\370S#>U\301(>\323Mb=;\3377@\221\355\274?\n\327\257Aff\003Dd]\\<\016\025\343<\303\330\202=\333\205f<d\351C=i\253\222;H\341\340A\217\302\223A\000\200<C\0000\034E\261\341\351=\010=\033>&\344\243>\370S#>U\301(>\323Mb=)\\\213A\341z\314A\000\000\345B\000\000mD_\007\316=h\263\352=\237<,>H\033\207=o\360\005>xEp=\336\223\007?B`\325?\207\026q@\270\036jBW\004\377<\3274\257=O@\023>\224\331 =\016-\262<u\310M<\\\217\220A\\\217\340A\315\314\360B\000@\177D\000\221\376=k\2327>{\203\217>@\023\341=\257%$>\365\241\213==\ncA\341z\276Aq\275\271B\315\254\030D`\315\301=\002\274\005>\035Z\344=~W\204=/\335d>r\277\203=\376e\327>\366(\354?\016-b@\000\000\370A\007B2<+\366\027=|\017\027=\252H\205<oG8=\342<\234;H\341\206Aff\013B\000\000\346B3\323JD@\244\037> \322\317>[\261\277>\353s5>j\336\361>\363\037\322=\217\302]A\244p\207A\205\353\265B\232\271\020D\363\037\322=?W\033>\301\305\312=:ue=\207\247W>\302\243\215=\3019\203>\376\324\230?\213l\367?\037\205\265A\033L\303;\013\322\014=\326\034 =C\034k<\307\327\236<\rl\225;\000\000|A\244p\327A\315\314\320Bf\206;D\006\201\025>w\276\337>\373\\\355>\236^)>#\333\271>\031\342\330=q=>A\315\314\222A\327\243\232B\232\031\330C\026\301\277=\326V\354=\300\347\207=B\262\000=\272kI>\213O\201=\242\264\227>b\020\310?h\221\005@\024\256\253A\335[\021<N\264+=T\214s=*:\222<u\315\344<\232w\234;\000\000TA\315\314\330Aff\254B\315\314\004D;\337\017>\210\364\233>\316\252\217>\371\017\351=)\355\255>\261P\253=33#A\n\327\213A\232\031\202B\232\231\240C(\362\244=b\363q=\307\200l=\377x/<\025\035I>\312T\201=b\241\266>\031\004\366?\331\316/@\354Q\266A\257Z\231;$\227\377<\307\200l=\377x/<\027\267\321<\246(\227;\024\2567A\217\302\303A\315\314\226B\232\331\311C\353\034\303=\204\r\017>\270\036E>\246D\022=s\327\222>\246\355\237=ff\236A\341z\254A3\263\001C\000\300\231D\361)\300=\002\274\005>\270@\002>\337\375\261=\364lV>\007\231d=\212\216t?\331\316\227?\201\225\317@\315\314\370B\027\364\336;`\315\001=\356%\r=>?\214<\371f\233<\353\213\204;\n\327\315A\270\036\345A\315L*C\000 \373D\025\214\n>\313\241\245>\2760\271>5^:>\033/\235>\371\017\251=q=\234AH\341\001B\000\000\000C\000\340\230D\rq\254=\213l\347=\372~\352=\377\354\207=*:\022>\330\236Y=6<=?\207\026\251?\240\032\227@\315\314\333B\200\200\265;\263\230\330<!<\332<\231\2360<!<Z<f\331\023;33\337A\327\2435B334C\000\320\032E\340-\020>3\304\321>D\213\314>ff&>\325\347\212>\036\376\232=ffZA\\\217RA\217\302\257B\2329\016D\322\214\305=\272f\262=\243@\037=\001\366\321<\226C\013>\325\354\201=\253>W>\322\000\336>J\014\262?33\213A\036n\207;\272\332\212<\363T\207<\2763\332;\350\237`<\260=3;\244puA\315\314\202A\205k\307B\315\2140D\024?\006>mV}>!\0374>\244\374\244=F\266s>n\213\262=\303\365XAff^A\024.\261B3S\014D\253>\327=!\037\364=\t\371\240=\036P6=\247\350H>\337\025\201=f\210\203>\367\006\377>9\264\000@q=\250A\277\271\277;\031\220\275<\214g\320<b\370\010<\212\345\226<\353;?;\024\256oA=\n\211A33\312Bf\246+D\004\347\014>:#\212>A\361\203>\307)\272=\221\355\234>\010w\247=H\341\"Aq=\214Aq=\202B\315\214\234C\365J\331=\367\036\256=\246\325\220<v\340\234<\201\225C>\321y\215=\355\236|>\250\306\233?J\014\322?\315\314pA\317j\001<B`e<1\322\013<\277\322\371;\346\005\330<\034{v;R\2702AR\270\266AH\341\217B\315\314\273Cr\371\017>\274t\023>5\230\206=\035Zd=\177j\234>\236)\264=\000\000|A\000\000\242A33\315B3S>D\205\353\321=F\224\366=\325\347\352=~W\204=\335$F>\337\025\201=N\321\261>\032\300k?\262\235\017@\217\302\000B\033,\234;cz\302<\033L\303<4\202\r<\211)\221<w1M;\341z\234A\354Q\362A\315\314\373B\000\000\210D\300\354\036>B`\345>:\222\313>\031s\027>\rq\314>>\350\331=\354QTA\366(\210A\232\031\251B\232\231\010D\037\364\254=\343\215L=d\222\021=\0162\311<\2760\031>4hh=\306\334\225>\352\004d?\345\320\002@\244p\305A\025\250\305;\036\3414<\252\016\271<\320c\024<\226\317r<\356\223#;q=rA\315\314\274A\024\256\305B331D\223\251\002>\024?\006>\353\3426>\2304\306=\245N\200>y\036\234=\244peA\037\205WA\037\005\271B\315L D\370\337\312=\270#\234=~tj=\364\211<=\341zT>l&_=\313\241\005?\311\345O?\376\324p@\366(AB\330J\350;\251\366i<\312T\301<\300\262R<w\241\271<\"\302\277:\366(\206A33\207A\315\314\334B\315LZD\024\320\004>\366(\034>\347\035\'>\033\236\336=?\306\234>\211\265x==\n\'A)\\wAq=\205B\315\314\244C\207\247\327=\205%\236=\206\255\331;\275:G<Y\0277>\223\030\204=&\344C>Y\027g?\276\237\232?\217\302=A\001k\325;I\022\004<k\2358;)\354\242;r\026v<\207\3408;\354Q8Aff\236A\244\360\222B3\263\305C\203Q\t>h\"\354=\327/\330<o\3306=T\343\205>`Y\251=\000\000pA\366(xAf\346\302B\000 +D&p\253=\367u\340=\3578\205=,\324\032=I\235@>b\363q=\373\\m>[B\376>\374\251\021@=\n\237A\255\370\206;\325[\003=\034B\025=6<=<\305\346c<3\372Q;\256G\203A\341z\232Aff\344B\315\014JD\036\247\350=\320\263\271>\262.\256>\2505\r>\253>\227>\366@\253=\205\353IA\217\302\277A3\263\242B33\370C{\332\241=\2451\232=\220\275^=\004\312\246<\232\010\033>\312\211v=\021\307z>\260r\210?\303\365\270?{\024\224A\267`\251;\253\354\273<\033\022\367<\262d\016<@\244_<\372G_;33cA\341z\372A\nW\265B\000\000\034D#J\373=E\330\260>B>\310>\374\251\361=\362\260\220>\001M\304=\256GMA\327\243\262A\037\205\252B\232\231\373C\211\322\336=\26578>h\221->f\203\214=,eY>\332\217\224=$\271\234>\376\324\210?\260r\020@=\n\311A\246\321\344;\020\006\036=\320\320?=\236\230u<\'\240\211<\320\016\270;33sA33\361A\232\231\322B\000\2000D\375\3665>\343\307\010?\267\321 ?\336qJ>;p\256>\000\221\376=ff\210A\327\243\230A\315\314\342B\000\300_DC\255\351=\t\371 >\201\225C>d;\337=\3436Z>7\211\201=4\200\227>\362\322-?\301\312\t@\n\327\377A\310E\265;\320~\244<\376C\372<+\301b<\365\326@<\224\027\031;R\270\234A\270\036\307A\000\200\005C\000\240\224D c.>\272k\311>\367u\000?\2343\202>I.\237>\274\221\271=\270\0365A\327\243\330A\037\205\217B\232\331\305C\276\366\214=4.\034=~\306\205<\315\314L;\267b?>\333\205f=\331\316\367=\375\207d?P\215\207?\024\256\tA,go;\030\354\206<~\306\205<\315\314L;t\322{<\331z\006;\256GAA\000\000\007B\327\243\237Bf&\342C:z\274=\005\243\022>\367\006\337=\255\243\252<j\336\221>J$\221=\037\2053Aq=\007B{\224\215Bff\301C\233U\237=\033d\022=7\302\242;N\324\322;\221\355<>\002\267n=\013Fe>\345\320\322?\215\227\276?)\\wA\361\325\216;\226?\337;\3708S;M\021`;o\365\234<w\021&;\217\302EA\270\036\'BH\341\234B3s\353CX\255\314=;\001\215=\374\343\275<\201\354\365<\017\013\225>\271\245\225={\024\244A\341z\336Aff\006C\000\340\244D\212\223\273=\210\364\333=-!\037>\237\315\252=tF\024>_\014e=\335$\006?\'1\230?\207\026q@\037\005\214B\320~\244;F\353\250<F\231\r=\333\2772<\021\252T<\3233=;\217\302\303A\037\205\025B3\263\"C\000\000\352Dlx\372=\373\\\215>tF\324>\033\r >~\214y>\264\216\252=o\022\031A\\\217~A\n\327pB\315\314\213C\274W\255=Mg\'=\363T\207<\206\217\210<\211\322\036>)\"\203=d]\\>o\201T?\037\205\233?q=JA\263\265><\303d*<rPB<\312\251\035<\"7\303<X\377g;\366((A\256G\231A\341z\203B3\363\247Cu\002\032>\001\336\302=D\250\222=\024\350\223=\215(\215>F|\247=\341z`A\000\000\252A{\224\263B\232\331\026D\354\300\271=\315;\216=\271\210o<\000R\233<?W\033>i\000o=\212\216\204>Nb\300?B`\325?\\\217\260Am\037\362;9\227b<\236E\357;\320~$<\017\356N<[\261?;\256GuAq=\362A=\212\304B\000\3402D\357\311\003>c\356\032>\3058\177=\016\025\243=A\361c>\004\377\233=\024\256\271A\217\302\327A\000\200\031C\000\300\320D\214\276\302=\237<,>\024\256G>mV\375=J{C>T5\201=\213l\207?\360\247v?m\347\347@\315\314\033C\371\241\322;v\211\352<v28=!\223\214<\270@\202<\327\024H;{\024\370A=\n\nB\000\000NC\000\0008E\207\247\027>O@\323>\364\375\024?\370\302\204>\244\337\236>x\264\261=\n\327\243A\024\256\253A\000\200\004C\000@\243DC\034\253=\220\367\252=\037.\271=?\251v=\2068\026>\310\014T=r\371/?}?\205?\246\233\244@\000\000\247Bwf\002<\343S\000=\341].=i\343\210<\236\265[<e\340\200;\217\302\301A)\\\321A3\263!C\000\300\332D\221~\373=z\245l>\212\260\241>\317\367\023>\324+e>\001\366\221=\037\205cA\315\314\336A\232\031\271B\232\371\033D4h\250=\206\311\324=\367\344\341=;\2154=\272k\t>9\013{=\214\271\253>j\274\024@R\270\006@\024\256\357A\363\252\316;\371\017\351<-\262\035=j\244%<\201&B<n5k;\000\000|A\366(\"B\000\000\315B\000\000?D\210c\335=\"lx>v\340\234>;S\250=7\211A>~\251\237=\024\256\213A\270\036\035B\315\314\342Bf&fD#\363\310=K\352\004>\316\031\021>\004s\264=\331=9>\013^t=\236^\t?_)[?\305 @@\000\000DB\243@\237;\257%\344<\345\'\325<\275\035a<+\336H<W\3204;{\024\264A\341z3B33\rC\000\000\260D\250\306\013>d;\277>o\360\245>\363\216S>\327\022\222>\202\377\255=q=ZA\232\231yA\217\302\256B3\323\017D\251\373\300=K\310\207=\200\267@=_\322\030= \322/>g\325g=\213\375\245>gD)?\356|\377?\037\205\331AK\002\324;\352xL<tF\224<,\2674<\362{\233<\247$\353:\232\231mAff\230AR8\274B\232\331*D\001\336\002>\3122\004>\255\372\034>\327\335\274=7\211\201>&S\205=R\270FA\327\243pAR8\235B\000@\356C\021S\242=/\372\n=\005\206,<\343\2105<vO\036>\020\257k=h\"\354=\010\254,?\301\312A?\223\030\020A\234\371U;\326\213\241;;\303\324;\343\213v;\004\347\214<\007B\262:33SA\303\365\242A3\263\247B\232\331\007D\252`\324=\243@\237=\232\266\177=M\370%=\375\207\224>t\352\212=\315\3144A\037\205\221A)\334\223B3\263\302C\264q\304=\024\256\007>\344\203\036>\270\314\351<aTR>\246\017\235=\220\240x>\016-\322?\262\235\027@\270\036\203ALU\332;\311<r=\306\334\265=(IW</n\243<\226!\016<\256GIA\024\256\337A\354Q\256B3s\354C\314\356\t>\2657\370>\222\\>?Gr\371=\236^\251>\024\320\004>\000\000\\A\366(\276A{\024\261B\000\200\023D|\270\244=Ih\213=\235c@=>\005\300<\"\2165>1_^=\000\221\336>\307K\207?V\0165@R\270\037B\325\222\216;\013{\332<\177\023\n=\244\374$<\002\324\324<DOJ;\366(pAR\270\322A\000\000\304B\000\2000DM\333\277=*\251\023>_)\013>\r\032z=yX\210>?t\201=33\233A\000\000\274A\232\031\001C\000`\220DaT\322=\t\212\037>N\321Q>;\374\265=\025\214J>\217\302u=\2068\006?\360\247\346?\033/\201@\327\243qB\221\325-<\2613\005=\300[ =3m\177<\276\023\263<\235f\201;33\255Aq=\364Af\346\020C\000 \261D\253\317\025>+\366\227>\263\014\261>R\' >\006\201\225>J\357\233=\024\256\'AH\341\236A\244p\205B\232\331\250C\321\"\333=y\222t=\265\340E=\221~\373<j\3361>&\344\203=\255i\276>\002+\'@\207\026!@\217\302\271AQf\203<\016\025c<\343\307\230<w\2419<\200`\016=\344Ni;\024\2567A\024\256\353A)\\\223Bff\311C\321\"\033>\363\037\322=j\336\361=\n\364\211=\017\234\223>\326\255\236=33SA\244p\213A\217B\250Bff\007Da\303\223=\224M9=A\2321=\017\0135<\320D\030>B\317f=y\351&>\221\355\314?\356|_?\303\365XA\023)\315;Q\210\200<O;\374<\340c\260;\037\272\240<\274t\023;=\n_A\\\217\336A\\\217\260B\000\200\026D\034|\341=Qk\032>\261Pk>:\222K=\237\253\215>@j\223=q=NA\217\302aAf\346\251B\315\014\000D\241g\263=\225\324\t>\226\262\014>S\005#=/n#>\236A\203=)\\O>\345a\341>\351&\031@\315\314\202A\274A\264;_\014e=j\023\247=\367u`<\343kO<\357\217\367;q=fA\232\231\215A\000\000\322Bf\306\037D\334h\000>\002\274\025?\253\317E?\256\330\037>\347\035\207> A\361=ff*A\217\302\311A\037\005\210B\000\200\255C~\306\305=\376&\224=?\343\302<\001M\204<\270@B>0\236\201=[\261\177>\240\032\277?\262\235\277?\270\036\205A\264\221\353;\014\223)<m\0341<\333\242\314;\212\310\260<\207\243+;\000\000DA\217\302\014B\303\365\233B\232\331\343Cc\177\031>\273\'\017>ff\346=\240T{=r\212\256>\276\331\246=\354Q8AH\341nAq\275\223Bf&\313C`v\317=h\350\237=_F1=\225\361\357<\267\321@>+\244|=\245,\203>/\335\204?\331\316\327?\303\365\224A\350L\332;\0162I<\rq\254<\263\322$<=a\211<\305s6;ffJA\037\205\251A\217\302\241Bf\346\365C\315;\016>.\377!>\307\2728>\227\305\304=\225e\210>\246\355\237=\037\205\247A\341z\274Af\346\nC\000\200\252D\315;\316=Tt$>\272\332\212>\335$\006>\301\312a>\003\225q=\022\203\200?\363\037R?m\347\313@f\346\tC\004\035\255;Z\022 =\273\355\302=\352\262\230<\237\260\304<\321\347\243;\327\243\314A\000\000\330A\315L%C\000@\373DG\003\370=\nh\242>8\3702?P\215W>\033\r\240>]\277\240=\000\0008A\232\231\223A\\\217\222B3\263\313C\267b\277=0du=\337\032\330<\023~\251<6\315;>\200\016s=\371\017\311>K\310W?\250\306+@\205\353\327AR\017\321;V}.<\026\373K<\275R\026<\271\302\273<\006\177\277:\037\205OA\024\256\263Aq=\246B3s\376CEG\362=\320\325\326=\213\375\245=h\005\206=\272I\214>\220\332\204=\n\327\235A\\\217\236A3\263\002C\000\300\226Dc\177\331=mV=>4\200w>\247y\307=\216u1>\221\'\211=!\037D?\024\256G?\024\256\203@\270\236\271B\026\370\n<}\"O=\226C\213=\336v\241<qZp<\350\334\355;q=\312AR\270\314A\315\314\037C\000\240\361D\240\032/>\260r\030?\203QY?\300[\200>\261\277\214>\024\320\004>ff\212A\327\243\210A\000\000\342B\315\014hD;p\316=a2\325=n\243\001>\307\021\253=\265\2469>\222\350e=\222\\\236>?W[?\035Z\014@\037\205\006B\234\340\233;d@v<\226\t\277<\036\304N<\231dd<\311\313\032;\315\314\236AR\270\310Af\346\002C\000\300\230D\227\377\020>\242Ev>\037\364\254>$(>>e\252\240>|\'\246=\232\231\233A\327\243\232A\000\000\375B\000 \222D\317\367\323=jM\363=\2505\r>\225\361\257=\306\3345>\026Mg=\347\214\030?\356Z\"?\014\002s@\000\000\216B\243V\230;\274t\223<\2652\341<\325\225O<@\244_<\347\035\';\232\231\315A\\\217\304A\232\031#C\000\200\366D\365J\031>\334\327\241>\310\007\335>\226\262L>;\001\255>\307K\267=)\\_Aff\210A)\334\266B\232\231\026D\367u\340=8\370\002>\215z\310=L\340V=\023aC>\265\025{=\232\231\331>\016OO?1\010$@\303\365\016B\r\034\320;\264v\333<,\202\377<\217\337[<F\353\250<\231\2360;\270\036\203A\\\217\260A33\330B\000\200ND,\324\032>\260\003\247>\001M\244>\226\262\014>\344\024\235>\231\365\242=ff\234A\366(\346A\232\231\005C\000\340\226D\022\245\275=O@S>}\2566>\214J\352=\334\327A>BC\177=\242\264W?\325x\231?V\016\345@\315\314\324B\376E\320;\245,C=~:\036=z\337x<\335\230\236<\370\030\254;ff\310A{\024\021B\232\2312C\000\300\360D\245,\003>\"l\010?\265\246\331>\'\302F>\027H\220>\362\322\315=\270\036uA\366(\212Aff\316B3S2D9\264\010>\261\341i>\332\254z>\222\\\376=\"\216u>\353\220\233=U\301(?P\215\207?\266\363\201@\n\327mB0L&<\253\354;=\213\032L=l>\256<XV\232<\254\342\r<\n\327\215A\256G\265A\232\231\357B33hDj\2744>\271\215\346>\312\303\342>\346?d>B\317\246>\263\352\363=\\\217zA\232\231\271Aff\334B\000`AD\212\037\343=\322o\237>x\234\242>;\001\r>\356|\177>M\370\245=B`\245?V\016\035@\205\353!A\000\200\nC\231\201J<\"\216u=c\227\250=\340\271\367<qr\277<\370\373\305;\315\314\236A\270\036\375A3\263\017C\000@\231Du\002\032>8g\004?\315;\036?\332\033|>K\310\247>\362\260\320=\341zxAq=\006Bff\317B\2329:D\320\263\331=g\325\'>jM3>\363\002\254=O\036V>\'1\210=\242\264w>\201\225\243?\201\225\363?\366(\270A\034%\257;5c\321<\271\252\354<\311q\'<\276\370\"<\253\"\\;\205\353\223A\366(FB\232\231\374B\000`\201D\267\321@>;p\016?.\377\021?\315;N>}\320\263>F\224\366=\341z\242A\341z\330Af\346\004C\000\000\241D\315\314\314=\211\322\336=\254\213\033>\315#\277=\354\3009>\250:d=V\237\313>X9\204?h\221%@)\\QB\300?\245;\017E\201<\265l\255<a\032\006<\372\nR<\374\374\367:\327\243\302A\327\243\034B\315L\"C\000\200\346DQ\332\033>\264\310\226>\023\362\301>\326\305->\312T\241>\314\321\243=\315\314\212A\341z\270A\000\000\336BfFiD\324e\261=\267\321\200=\252\324\354<4h\350<R\' >\356_Y=\215(\315>u\223\250?\221\355$@\327\2431B+\241\273;\00155<\007%L<\003]\373;\241-g<\345\324\316:\315\314\236A\217\302\373A33\000C\000@\230D\266\363\375=\231*\030>G\003\370=\036\247\250=\265\025{>]m\205=\354Q\212A=\n\261A\315\314\344B3\363lD\255L\270=\356Z\002>5\230\306=M\276\231=\365\333W>1\316_=t\265U?%\006\321?\010\254\304@H\341\265BH\032\334;U\373t=\364\370==\314\013\260<\304\010\341<\262L\277;\270\036\243A\205\353\331Af\346\tC\000\340\241DB>\350=X\312\222>\261Pk>\232w\034>\310\007\235>\267E\231=\217\302yA=\n\233A\000\000\310Bf\246=D.\220\240=\007\010f=\220f,=\3539\351<\255i\036>\376\361^=\261Pk>[\261\177?\035Z\304?\244p\261Aj49;#-\025<S\313V<\250\212\251;M\370%<\266J\260:\256G\217A)\\\375A\315\314\347Bf&wD\322\000\336=l\t9>\213lg>\377x\257=\236^\211>\241\333\213=\037\205\211A\\\217\260A33\337B3\023hD@0\307=\2657\270=\274\221\271=G\254\205=I.?>\212\216d=\2201\327>;\001=?\177j4@\024\2565B\004:\223;N\227E<\254\305\247<\301\312!<\326n;<;p\316:\327\243\254A\327\243\352A\000\200\014C\000\200\263D\t\212\037>/n\203>\347\035\307>_)K>\301\250\244>\232\010\233=\n\327\245A\303\365\370A3\263\007C\000`\261D\325\354\301=\036\026\352=\026\373\013>\361\021\261=F%5>4hh=\031\004\226?\333\371\316?\317\367\367@3\263GC\216 \225;\320\'r<\370\215\257<$\013\030<#\370_<\322\252\026;\303\365\001B\327\243<B\000\000VC\000\200VE`v\017>p_\207>\373:\260>\261\341)>s\327\222>\375M\250=\232\231)A\232\231\227A\\\217\212B33\255C\005i\306=\325\347\352=F\316\202=\301n\330<\024\320D>\211\357\204=\360\247\346>L7\231?\037\205[@\315\314\330A\347\306\364;\202\255\022==a\t=@\244_<\032\206\017=\315rY;{\024>A\037\205\267A\\\217\234Bff\324C\"l\370=\234\304\200>\3122D>\021S\242=+\207\226>\273a\233=\244pYAR\270\256A\354Q\256B\000@\014DZ\360\242=\362$\251=\004\312&=\377x\257<\213l\'>\021\374o=V\016\255>}?\365?\362\322%@{\024\326Ay \262;z\031\305<\276\336\375<M\203\"<0L\246<\2452E;\315\314lA\354Q\360A\354Q\303B\000`%D\362\322\315=\351&1>\206\311\024>^\200}=lxz>\375\331\217=\205\353MA\024\256\201A\217\302\244B\315\014\000D%\006\301=\361\272~=w\276\037=\001M\204<\362\322M>YLl=\305 p>1\010\234?T\343\305?\205\353\221AW\320\264;\370k\262<D\027\324<\343k\317;\'k\324<t\\\r;ff^A\270\036\275A=\212\262B\000`\025DI\235\000>\243#9>\026\373K>\261\277l=Y\206\270>8\241\220=)\\+A\270\036\243A\000\000\213B3s\254C\366\227\335=]\376\003>\332\003\255=Y\335\352<\237\315*>\244\210\214=\323\274\243>\215\227\276?R\270\016@\205\353\245A\262\331\021<]\376C=\177M\226=M\363\216<Nz\337<O]\371;=\n;A\024\256\311A\037\005\231B33\315C9\264\010>\\\217\202>\245\275\201>\305 \260=B`\205>M2\262=\327\243dA\\\217\206A\232\231\264Bf&\036Dz\252\203=\321\"\333<h\221\355;\315\314\314;Qk\032>r3\\=&S\005>\320D8?\325\tX?\354Q,A\n\332d;y#s;l#\236;2tl;\202\250{<\254\002\265:\\\217nA33\245AH\341\274Bf&+D\301s\257=JFN=\363Y\036=\n\205\010=\377\262{>\332\254z=\327\2434A\327\243PA\303u\220B\000\000\302C{f\311=\325\317\233=\002\274\005=\212\260\341<F%5>\334h\200=8\370B>4\200\007?\364\375\224?R\270RA\022\023\324;\027\3247<\372\nR<e\373\020<\320\233\212<k\2358;\270\036EA\244p\201A=\212\234B\000\300\344C(\017\013>\032Q\032>\\\217\002>33\263=\372\355\213>bJ\244=\000\000\256A\205\353\247A\315L\023C\000`\272DQ\210\300=p\316H>\234\304`>\211\322\336=\373:0>\314\264}=B`\225?V\016\255?;\337\rA\315\314\034C\004Z\272;_)K=0\236\201=\026\301\177<4\235\235<\n1\227;\037\205\341A\244p\341Af\346CC\000\000\025E\270@\002>\205\353\361>\301\250\024?\266\204<>\263\014\221>ni\265=;\337\033AR\270zA\000\000vB3\363\220C\350\023\271=\273\017@=,\2674<\333\205f<+\030U>\017E\201=\272k\211>\035Z\264?\000\000\340?\270\036\203Ae\031b<9\321.<\333\301\010<s0\033<\313J\223<\334\237\213;\000\000,A=\n\247A\024.\210B\232\231\261C\2068\026>\311\345\277=\355\231%=\tPS=\216u\221>\213l\247=\244p\217A\n\327\303Aff\346B\232\271yD\264Y\265=\270\351\217=Yni=rPB=\277}\035>\212\260a=\207\247\327>\213l\267?\303\3650@q=7B\225c\262;j\207?<\316\337\204<\334\237\013<,}h<\037J4;)\\\247A\217\302\nB\232\031\007C\000\000\245D\360\247\006>5\3578>\364\375T>\036\247\350=n4\200>i\306\242=q=>AH\341\212Aff\230B\315\314\331CH\341\372=*\251\223=\022\332r=I\242\227=\004VN>\327\243p=\257%$?\203\300\022@\010\254\200@)\\CB;Sh<0\365s<\325\225O<\232w\234<\273a\333<4\275D;ffFA\205\353\227A\205\353\236B33\354C_)\013>k`\253=R~\222=\3166\267=\370Sc>\227\034w=\256G5A\\\217bA{\224\217B\315L\306C\371\024\300=\335\230\036=q\347\302:vnZ;\360\026H>\234mn=33s>\n\327\243?\354Q\310?R\270\210A5\r\n<Yl\023<q\347\302:vnZ;\330*\301<\020A\325:33CA\205\353\227Aq\275\232B\000\000\345C\356\353\000>\257|\226=\215]\242;\270\0066<\2505\215>\010\311\202=\341z\226A\n\327\237A\315\314\361B\000\300\211D8\276\266=6\002q=\346?\244=LTo=R\270\036>\333\242L=\360\026\250>\317\367S?d;\027@\303\365\022B\'\026\370;\214\2046<L\340\326<\253\262o<\t\033\236<:\255\333:\024\256\237Aff\302A\000\000\001C\000\200\232D\000\221\376=h\221\355=\323Mb>o\201\004>/n\203>\316\374j=\244pYAR\270\216A\341z\254B3\023\017Di\306\242=M\370%= \230\243<|\325J<@\023!>e\031b=\223\030\204>}?\225?\213l\327?\217\302\261A\221+u;\205\321\254;V}.<$H\245;r3\\<J\226\223:\000\000xA\315\314\320A\354\321\305Bf\3068D=\n\327=;\031\234=\207\026\331=\252`T=\240\032o>(D\200=\232\231]AH\341rA\341\372\261B\232\331\022D?\343\302=Cs\235=\270u7=\250\000\030=b\020X>\'\275o=\177\331}>Zdk?q=\352?\256G\233A\301\305\212;:z|<\002\267n<\227\342*<\367Xz<6\314\320:\024\256oA\205\353\255Aq\275\304B\000\200\'D!\260\362=\240\2110>+\030\025>\032\250\314=\307K\227>\311\216\215=\256G\231A\315\314\324Aff\374B\000@\216D`\345\320=\206\311\024>\335\265D>1\353\305=\312\303B>m\305~=s\327\"?\305 \200?\242E\212@\315L\213B\2278\362;A\237\310<6Y#=Z\330S<C\034k<I\326a;\217\302\275A\232\231\017B\315\314\037C\000\200\327D\020z6>\301\250\304>jM\023?[\261?>B\317\246>\313\020\307=\n\327;A\354Q`A\341z\224Bf\246\325C\237\002\240=3\3041=\020\351\267<OX\342<t$W>scz=\256\330\017?\323M\242?T\343m@\354Q\027B\n\241\003<\335Al<\303\rx<m9\227<\317I\357<Qf\003;\303\365TA{\024\222Aff\251B\315l\005D=,\324={\024\256=\314\356\211=z\307\251=m\305\236>b\370\210=33\233A\244p\221Aff\376B\000 \217D\252`\324=*\251\023>\235\200&>\236\322\301=\334\327A>\031Vq=\316\031\361>\340\276~?\301\3129@\327\243TB1E\271;_$\264<\341\227\372<\236\230u<\307\364\204<;\307\000;\354Q\276A33\345Aff\030C\000\200\313Dvq\033>\345\362\277>\255\372\334>\324\232f>\331\316\267>Nz\237=\205\353\201A\366(\226A\232\231\331BfFID\032Q\332=Y\2068>\247yG>\215b\271=7\032@>i\343\210=\374\030\223>,\324j?-\262\035@R\270\340A8\205\225;\356\224\016=\335\230\036=#\025F<\361hc<\351\271\205;ff\224AR\270\310A\315\314\375B\000\340\200D\250\306\013>|\362\360>e\252\000?W[1>\362\322\215>\320\263\331=q=NA33{A\366(\250Bf&\001D\326\034\240=\3122\304=\035Z\344=\272\332\n=\005\243\022>\374\030s=F%\225>\301\312\261??5\026@\354Q\272A\026N\322;\030>\"=OX\242=zS\221<\204\330\231<\2278r;ff^A\037\205\235Aq=\270Bf\346\024D\324H\313=\304Bm>z6\253>\027H\320=\226\262L>\001\366\221=\256GIA33\223A\366\250\237B\000\200\364C~\343\253=\367\257,=>\313\363:\224\240?;\326\305-> \322o=z6\213>\315\314\254?\272I\334?\232\231\263A|(\321;\3753\003<>\313\363:\224\240?;\307\235\322<\027\016\004;\000\000XA\327\243\270A\270\036\253Bf\006\rD\030\225\324=\326\250\207=\013\320\266;o\270\017<\211A\200>\366\264\203==\n?A{\024\246Aq\275\233B\000\200\334C\373:\260=\204\r\317=\261\242\206=\204G\033=x\234\">S\221\212=\361c\214>\205\353\261?\010\254L@\256G\257A\017+\334;\2240S=\007\2613=~\306\205<\257Z\231<YQ\003<\n\327SA\354Q\332Aff\270Bf\206\010D\212\216\344=\216\006\220>\016-r>D\213\354=\177j|>/i\314=q=NA\205\353QA\256\307\243B\232\371\000D;p\216=f\275\030=\243#\271<M\333?<\247\350\010>\007\231d=v\340\034>\305 \360>R\270\216?H\341JA\201\006\233;d]\\<\363T\207<\273~\301;\344\240\204<ca\010;\205\353YA\327\243xA\315\314\256B\000@\020D\211\357\304=\325\347\352=\217\344\362=\227\312[=\rql>\204\236\215=\366(4A\024\256\237A\244p\223B\315\014\305C\346?\244=j\336\361=x\356\275=m\342d=/\335\204>\276M\177=\243#\371>\n\327\363?\305 8@R\270\nB,\361\200<\2554\251=\026\336\245=\330\323\016=T\000\014=\217\214\325;\217\302=A\327\243\262A=\212\234B\315\314\332C\316\210\322=$\271<>vO\036>/\300\276=\307K\227>Y\213\217=\205\3535A\270\036\227A\nW\220B\000\000\306C7q\262=\260 M=\255\206\304<\035\003\262<\226!N>\263\352s=\271\374\207>\010\254\374?\254\034\372?\205\353\213A\270<\326;\212\216d<\237qa<F\230\"<[\353\013=\260\343?;\217\302EA\270\036\321A{\224\236Bf\246\345Cf\367\344=\341\321\306=\2451\232=+\023~=9E\247>\264<\217=\\\217fA\n\327\235A\\\017\300B\000\300\"D\346W\263=V\237+>\003x\013>~5\207={\203/>\313J\223=\305\217a?\\\217\342?\037\205\213@R8\232B`X\376;>\350\331=\026\373\313=\025\000\343<r\376&=\345D\273<\354Q|A=\n\261Aff\313B3\323?D\254s\314=\377!}>\370Sc>\316\031\321=\036\247h>\0324\264=)\\oA\315\314\230A\\\017\302B3\323+D\372\'\270=\317,\311=jMs=\341bE=\334h@>\253\262o=jM\223>!\260r?\252\361\n@\303\365\306A\017\270\256;\304B\255<\202\250{<czB<O]y<\335{8;\000\000\202A\037\205\321A33\332B3sJD\202s\006>\321\"\233>\307\2728>>y\030>\207\247\227>\256\201\255=33OA\366(\200A\256G\246B\315l\000D\362\322\315=2\254\242=\332\033|=\003\t\n=\351&1>o\201\204=\364lV>J{C?h\221\235?)\\\215AM\363\016<\364\025\244<\200H\277<\205w9<=\n\327<\220\334\232;\n\327[A\244p\237A\270\236\261B\232Y\022D\365\333\027>a\303S>xze>\320D\330=V\016\255>\303G\304=\232\231=A\024\256\213A{\024\227B\232Y\330Cdu\253=\250\030g=r3\334<\021\307\272<\000\000@>\036\026j=\317\367S>\311v\236?\266\363\235?{\024^Az\337\370;\217\302u<\223Wg<\275\212\014<\367\314\222<\033\325\351:\303\365PA\000\000\316A3\263\250B3s\001D\203/\014>\352\0044>\'\302\006>\354/\273=m\305\236>\334\200\217=\037\205KA\341z\\A\\\217\243B\315\014\366C\354\372\305=~\343\253=\243\006S<4\235\235<0\273\'>#\333y=l\t9>\000o1?\037\205\253?{\024VA\205\264\306;\312TA<\323\026\327;(\266\002<\275\035a<\305s\266:\000\000XA\n\327\213A{\024\261B\315l\nDK\352\004>\231\273\026>\373WV=\226\347\201=\352\225r>7\303\215=\354Q\\A\354QTA\270\036\260B\315\254\021D\003`\274=\352\317~=t).<g\n\235<S\005#>\320\'r=\300[`>N\3211?\337O\275?\205\353\215A\253y\216;)\224\005<\"\374\213;\316\305\337;\247t\260<\0261\354:R\270jA\244p\207A\nW\274BfF%D\262\235\357=\254\213\333=\333\334\030=a\246m=\240\211\220> $\213=\\\217.A\232\231EA\256G\212B\232\331\265C\332r\256=F_A=\231\201J<\006L`<\252`\024>\236\007w=\330\2013>\274t\203?\016-\242?\244p1A(\357c;t\014H<\360\242/<\031\345\031<>\355\360<L\250`;\205\3535A\270\036mA\n\327\220B\232\031\304C\263\265\276=\017\271\231=\335A\354<\204\323\002=vq[>t\014\210=\366(<A\270\036\221A\000\000\226B\315\214\327C\007%\314=\311<r=\210\364\333<r\371\017=\035\311%>\375\301\200=\270\036%?R\270\006@\177j\204@\244pDB\246^\267;\301\250$<\214gP<o\236j<%\006\201<\220\2774;\217\302UA\270\036\273A33\252Bff\nD\214\333\350=\272N\243=\332\254z=\005\243\222=\025\214J>\204\236\215=\366(dA)\\\221A\244p\266BfF\036D.\255\206=\253\317U=\203\300\312<\275\035a<\213l\'>u\315d=\037\205k>\226C+?\246\233\324?\341z\244A\377\256O;\221\233a<\212\3100<y\315\253;,\2674<\003A\000;\217\302\201A{\024\312A\232\231\323B\315\354LD\000o\301=\233\346]>\211A >\3436\232=\224\366\206>Y4\235=\366((AR\270\270A3\263\205B\232\031\247C;\337\317=\3333\213=\361c\314<\232\231\231<h\221->RD\206=s\327\222>\323M\222?\372~\022@\341z\244A\022\240&<\317kl<\000t\230<\315\314L<\254\342\r=\345+\001;H\341.A\217\302\301A33\214B\232Y\265C\036\026\352=+j\260=\312O*=\000\000\000=x\013d>\377\312\212=q=\234A33\227A\000\200\001C\000 \230D\037\205\353=\013$(>\t\371`>c\177\331=4\2007>Z/\206=?5\216?\246\233\224?\201\225\347@\000\000\005Ciq\306;\3441\003=\267\356f=\245\367\215<XV\232<D\334\234;\244p\317A\205\353\321A\232\031+C\000P\000E\207\026\031><\275\322>\226\262\034?\203\300J>+\366\227>\216X\313=)\\GA\270\036\237A)\334\240Bf\246\353C\224\023\255=\316\252\317=\337\340\213=\276\336\375<\331_6>\204\365\177=lx\272>\270\036\205?V\016%@\\\217\342A\234\371\325;\207\376\t=\347\000A=\026\336e<\367u\340<jg\230;)\\WA\\\217\270A\217B\260B3\323\tD=\n\327=\255\372\\>8\370B>\366(\234=\325x\211>\270\001\237=R\270\240AH\341\276A3\263\006C\000\340\233D\033/\335=\0216<>z\307i>o\022\003>0Lf>\022\367\230=L7\211?\240\032\337?^\272\371@\315\314\002Cp{\002<\236\322A=\312\246\234=\335\230\236<\024\"\340<\253?\302;\244p\275A\244p\353A\315\314\036C\000\000\324D\314\356\t>\204\236\255>\266\204\374>K\352D>\036\247\250>\325\354\301=\n\327\'AH\341\224AR\270\205Bf&\247C\365\271\332=\364\303\210=\225+\274<N\321\221<\276\301\027>\002+\207=b\020\030>b\020\310?\341z\204?\256G!Ash\021<\023c\031<\202\034\224<g\267\026<\376\267\222<\007bY;\303\3650A\354Q\304A\037\205\215B3\263\273C\362\260\020>\253\317\325=\307\200\254=\205\261\205=x\234b>\252\232\240=)\\7A\256G\221A\024.\223B\315\214\311C7O\265=\270\222\235=b\370\010=r\026v<\205|\020>\232\266\177=g\325\247>P\215\207?ff\036@\244p\267A\005\371\331;y@\331<\277\361\265<\335\321\377;\017(\233<\025\213_;H\341JAH\341\254AHa\245Bf\346\364C\214J\352=\22017>\265\025\373=\r\246a=e\031b>\036m\234=\232\2319A\205\353\303A\303u\224B\232\231\320CI\021\231=\001\373h=\310\265\241<6\037W<\335$F>L\303p=I\235\200>\246\233\344?\014\002\373?\024\256\221A\017\233\310;qr\277<\214\276\202<{O\345;\204\323\002=m\346\020;=\nGA\303\365\374A\256\307\242B\000@\356CJ{\303=\314]\013>5A\224=\3578E=\302\027\246>:#\212=33SA\270\036}A\327#\250B3S\006D\'N\256=\272\024W=\006\177\277:\200\266U;\347\035\'>\022kq=\001\336B>\345\320\022?\254\034\232?\000\000xA\331\006n;l\313\000<f\331\223:p^\034;r3\\<\032i);\\\217fA\232\231\243A\000\000\270B\2329\037D\260\003\347=\225\324\t>4\2007<\315\314\314<0\273\207>\214\271\253=\000\000\020AfffA\244paB\315LvC`v\217=BC\377<\357<q;~\212c;Y\0277>\231\360\213=X\3122>=\n\247?\230n\222?\276\237\034Am\037\362;\223\001\240;\357<q;~\212c;\023D\335<Y\031\r;\033/\033A\\\217\240A\232\231sB\000\300\216C\n\364\311=\177MV=(,q<\342\222c<\243#\231>o\323\237=\000\000XA)\\KAHa\253B\315\214\rD|\017\227=\211\007\024=\220\2774;B\315\220;\250\306\013>\210\205Z=\035\311e>\351\267/?\351&\301?\270\036\243AY\302Z;s\177u;\300\t\005;\274wT;\263{r<>B\315:\037\205oA\037\205\207A\303\365\276B\315\254.D\202\312\270=\345\no=t\357a<\017\013\265<\013$h>\323\237}=\315\314PA\244p]A\205k\245Bf\246\004D\211\014\253=P\374\030=\252c\225;\203\247\020<\206\311\024>l\004b=\037\205\313>\223\030T?\272I$@=\n\004B\362\353\207;\273^\232;L\2109;{\371\235;\001\373h<\235\366\024;\024\256kA33\213A\205\353\273B\232\031(D\251\023\320==~o=\rl\225<\264\253\020=\276\301W>\'\302\206=33;AH\341\230A\366\250\224B\232Y\321C\277\202\264=\263)W=\353\255\201<\234\026<<\024?F>\275\000{=A\361#>=\n\267?\266\363\215?\341z4A\205\264\306;\034B\025<\246\270*<0H\372;\032n\300<\351\265\331:\217\302IAff\324A\n\327\241B\315\214\361Clx\372=\033\236\336=e\031\242=\300&k=\316\210\262>\366\177\216=\217\302iA=\n{A)\\\271B\2329&DC\004\234=r\371\017=\224\023m<\213\303\231<\347\035\'>\253>W=\301\312\241>\020Xi?\254\034\372?33\347A\026\333\244;\317K\305;V}\256;\2179\317;\347\306t<\003\221j:\024\256\203A\000\000\256Aff\317B33RD\204\r\317=J$\221=keB=\271\031n=7\211\201>gDi=\366(LA\205\353UA{\224\244B\315\014\374C\343\031\264=i\306\242=M\370%=o\273\320<A\361#>\221~{=\002+\247>p\316(?\335$\026@\244p\311A\237\313\324;+\301\342<\324}\000=\034%/<\263\315\215<\304\352\217;=\ncA33\203A{\024\270B3\263\032D\375\207\364=e\031b>F%5>\335A\254=\334F\203>}\005\251=\327\2438A\037\205+A\303u\223B\315\214\314C\n\021\260=\200}t=#\370_<\252\356\021<\377\262;>#\333y=KY\006>\"l\270>-\262\215?\014\002\027A\237\"\207;\254\213[<\336T$<\242\355\230;!v\246<@\332\377:\244pEA\205\353MA\303u\242Bf\346\351C@\244\337=\235\200&>\274y\252=\\ A=h\221\255>\222?\230=P\215\tA\315\314\224A)\\XB33]C\210\364\333==~o=\000\000\000\000\000\000\000\000\277}]>[\266\226=\rq\254>^\2721@?5\016@\341z\216A\347\373\251<\026\336e<\000\000\000\000\000\000\000\000{\275{=Nz\337;d;\017A\037\205\263A\232\231bB\232\031pC\314\356\t>s\021\237=\000\000\000\000\000\000\000\000\323\336\240>77\246=\n\327GA\315\314\206AHa\236B\315\314\360C\'N\256=g\n\035=>\222\222;\007x\322;\376\324\370=\267]h=\351\267/>\313\0207?\031\004\206?=\nKA\017{\241;\371dE;N\264+;\303*^;\250:d<()\260:\244pUA\024\256\235A\303\365\250B\315\014\010De\031\342=\370\337J=\316\302\236<\266\020\344<\001MD>\025\343|=H\341BA\256GaA\000\200\232B3\263\346Cod\236=C\220\003=\t\3767<\334\202\245;\261P+>\017bg=\007_X>c\177\031?b\020\270?\270\036}AU\024\257;\032\371\274;\t\3767<\334\202\245;\262\364\241<\330\026y:\232\231MA\217\302\203A33\243BfF\000D;\001\315=\023fZ=c\227(=A\267\227<\237\315j>\210Fw=\217\302\221A\303\365\226Aff\355B\000`\200D\034\231\307=\370\302\344=\213l\347=\345\320\242=l\t9>X\377g=2\346\316>v\340\014?\014\002#@\232\231CB{\371\235;\300\347\207<lC\305<\345D;<`\345P<\365\240 ;R\270\256A\000\000\310Af\346\014C\000\240\271Ds\327\022>2w\215>\013F\305>\306\3345>r\371\217>!\345\247=\010\254\020A33\227A\256GpB\000\200tC\007%\314=\314\356I>q=J>\034\010I=\215\227n>\200\016\263=\315;\356>\246\233\364?L7q@\232\231\301A\354L!<\224\366\206=aT\322=\010\003\317<\312\375\016=\210\016\001<\303\365 A33\273Aq=\211B\315\214\224C\221\017\372=\311\345\277>\026\373\353>\372~\352=\022\203\240>b\020\330=H\341FA\000\000\210A33\235Bf\246\356Cr\304\232=\321y\r=\217\337[<\235.\213<\231\273\026>P\307c=\000o\301>\315\314\014@\002+\037@\256G\371A\375\022\361;\212\3100<\023+#<4\2007<\235\235\014=V\rB;ffNA\024\256\241A\037\205\243B\232\371\000Da7\254=\347\000A=JA\267<X\377\347<\223\251B>\207\371r=\000\000$A\244p\201A=\n\205B\232\031\242C\365J\331=f\210\343=\234\277\211=\nh\"=\263{2>\354\022\225=-C\274>\272I\274?\177j\314?\244p\265A@\336+<\304\261.=\374\000$=\016\370|<\220\275\336<\336\347\370;\341z4AH\341\244A\\\017\217B33\303C\227\220\017>\374\251q>\356ZB>\237\216\307=\224\207\205>l\262\306=\256G\241A\256G\235A\232\031\003C\000@\237D\346?\244=\006d\257=D\213\354=~:\236=]mE>o\273P=\024\256\027?[\261/?P\215w@3\263\225B\272\242\224;\237qa<\254\255\330<\371NL<\213\246\263<\376E\320:\341z\270Aq=\270A33\026C\000 \317D\365\333\327=\210c\035>]m\205>\205\353\021>\177j\234>\004\004s=\217\302MA\270\036UA\327\243\245Bff\374CB>\350=\232\353\264=\343\245\033=\226C\013=\322\000\036>\344\240\204=A\202b>B`\205?\215\227\316?\\\217\204A\254\250\301;\226&\245<\325\317\233<j\244%<\211\357D<\317\236K;\327\243`A\327\243\250A\232\231\271B\000\340\025D\255i\036>Ttd>\376e7>D\213\354=\263\352s>Z*\257=R\270\242A{\024\254Af\346\007C\000\000\236D\262\235\357=\000\000@>\370S\203>u\002\032>f\210\203>\002\232\210=\241\370\021?\252\361\202?Nb\200@\270\036\212B\204\273\263;\304%\307<\223\251\002=\006L`<+\301\342<\3127[;ff\312AH\341\376A\232\031+C\000@\362DS\005#>\213\375\345>p\316\010?\325x\211>\351H\016?\027\267\321=33CA)\\sA\037\005\234B3\363\344C\200\237\261=\246\n\206=6Y\243<\320\233\212<0\273\'>9\013{=\n\327\203>6\253N?\203\300\372?{\024\230A\246\013\261;;Sh<#2,<9~\250;\023fZ<\363T\007;\000\000\\A=\n\253AR8\266Bf\306\021DI\235\000>]mE>i\000\357=\342\222c=B>\210>\221\n\243=R\270JAff\212A\000\200\242B3\363\364C\316\210\322=o\365\234=\010\311\002=\376\232\254<\373\313.>\312\032u==\nW>\370Ss?\260r\310?H\341\214A\010\036\337;\234\340\033<M\276Y<\331#\324;k\202\250<\033\325\351:)\\[A\315\314\250Aff\261B\232\231\017D\273\270\r>\2657\370=`\345\320=:ue=\'\240\211>\365\020\215=\217\302aA{\024NA\\\017\264B\000 \032D\370\245\276=qUY=\274\226\220<*\343\337<_\230\014>\325xi=\234\242\203>5^\212?\213l\307?)\\\277A\221H\333;\205w9<\254U\273;N\'\331;X\377g<cD\";\341zxA\000\000\220A\315\314\304B\232y;D\245,\003>\212\037\343=\356_Y= Aq==\nW>R\017\221=\341z@A\244p\217A\024.\230B\000\000\337C\014Y\235=\224j\037=\'\243\312:\031=\267;M\204\r>\220\240x=\240\032o>\031\342h?\343\245\273?\217\302\207A\272\365\232;X\254\341;s0\233:dw\201;\1770p<\007\010\346:\270\036QA\000\000\262A\341z\245B\232\331\002D`v\317=\342X\227=\270\\\375;_\014\345<vO^>&\036\220=\366(\202A\024\256\245A\315\314\325B\315lKDDi\357=\313\020\007>\342X\027>\221\325\255=\247yG>\217\215\200=\000\000\340>-\262\235?\256GQ@\327\2431B\202r\333;\255\243\252<\300\t\005=\266\020d<\202\250{<\250\3076;q=\232A=\n\363A\315\314\001C\000 \214D\345\320\">\353\342\226>\231*\270>e\031\">\244\337\236>\236\357\247={\024\202A=\n\257A\000\000\327B3\263ND\215\227\356=\023a\003>\26578>ms\243=\267b?>~\306\205=\327\022\022?\372~\272?\006\201=@H\341fB\332\003-<\204\330\031=Z*o=rPB<\272\275$=Q\274\312;\n\327\215A\024\256\311Aff\343B\315\314sD\274\005\022>\254\255X>z6\253>\364l\326=M\025\214>\240\340\242=q=\200A\366(xA\232\231\323B\315LFD-`\302=\361c\014>F\224\366=\0363\220=\020z6>\347\306t=_\230\254>\267b??\211A(@{\024\005B\025U\277;K\352\004=\231*\030=\345\no<qZp<\261\211L;{\024\226A\n\327\257A\232\231\370B\000\300\205D\252\361\022>\013F\345>H\277\375>\272\332J>\243\222\232>\n\334\272=\024\256OA\315\314\232A=\n\251B\000\200\000D\214-\304=ff\346=&\215\221=\374\251\361<\217S4>o\360\205=\272k\211>\227\377\020?\217\302\035@33\245A\217\251\273;&S\005=\362\3573=Q\276 <\247\\\341<\267\320\225;R\270fA\232\231\257A\205k\306B3\223\036D&\344\003>\271\215\246>\251\023\260>P\344\311=~\035\270>=\270\273=\037\2053AH\341\236AH\341\217Bf\246\301C\365\333\327=|\325\212=_\t\244;\321z\370;\360\247F>)\350v=\007_\230>\343\245\373?\203\300\372?\303\365\234A\2240S<\036\3414<{\022X;7\302\242;\024\313-=\255\245\000;\024\256?Aq=\316A\354\321\231B\315\014\332CN\321\021>h\005\306=\365\271Z<j\244\245<\347\214\250>\020\222\205=\000\0004A\341zlA\217\302\216B\000\000\303C\\\033\252=\205\2316=\347?\177:\313\275@;\"\2165>\350\023y=\254\213[>i\000\177?F\266\303?\270\036qA\320\016\270;rp\351;\347?\177:\313\275@;\226C\213<\300\t\005;\366(LA\341z\260A\366(\244B\232Y\366C\373\313\356=\304\224\310=W\320\264;\206\217\210<\305 \220>\257\353\227=\315\314DA\366(\230A\217\302\233B33\350C\020@\252=*\035,=\013&\376;b\326\013<\366\227\035>\330\201s=\177j<>\223\030\304?\325x\231?\n\327SAO\037\001<_&\n<\317\201\345;\200\266\325;\307\327\236<\371\236\021;\232\231UA\024\256\343A\\\017\251B3\023\010D\376C\372=\215b\271=\367;\024=\310$#=\312\303\202>p\231\223=\341z\210A\000\000\250A\232\231\337Bf\246eD\324+\345=\320D\330=Qk\032>\305r\313=E\3300>\r\253x=\356\353P?\211A\010@\230n\302@\nW\256Bw\204\323;\3225\223<\344f8=U\336\216<\351\324\225<Y\245t;\205\353\247A\232\231\004B33\017C\000@\252D\252`\024>*:R>9\264\310>\265\025;>0L\206>\245\240\233=\n\327OA\024\256cA\366(\250B3\223\000D!\310\301=M\025\314=\305\033\031=@\336\253<0*)>\367;\224=\354\3009>\257%$?\243\001l?\\\217fA\317h\253;[\323\274<W\004\377<\253\262\357;RD\206<t\317\272;\037\205[A\256G\207A\217\302\256B\000\000\020D\261\341\351=q=J>\341z\024>\262\235o=l\ty>\251\244\316=\366(\226A\244p\253A\315\314\365B\000\200\210D\030\262\272=\227\220\017>\207\026\331=Gry=\271\374G>\341(y=8g$?\n\327\303?\331\316\213@\000\200\260B7U\367;\002\237\037=DQ =H\304\224<A\232\261<]\247\221;\354Q\304A\341z\tB\232\031!C\000 \352D,e\031>t$\367>\304B\355>\027\267Q>d]\274>:#\312=\315\314 Aq=\214A\354\321\200Bff\233C\315;\316=W\t\226=}\263\315<sh\221<7\211A>\254\250\201=\302\027\206>\303\365\000@\201\225\343?\315\314\206AO\260\377;wgm<\336q\212<\311\306\003<1\010\254<\033\0176;\\\2172AR\270\326A\303\365\217B\000\000\300C\227\220\017>\227\220\017>b\020\330=z\031\205==,\224>o\365\234={\024\274A\366(\302A\232\031\033C\000`\332Dc\356\332=\023a\003>\326Vl>Nb\020>G\0038>\230\206a=\351&\201?\010\254l?\264\310\316@\232\031$C\037-\316;\336v\241<\376\267\022=\345\'U<\302Qr<\\WL;)\\\365A\n\327\365AffJC\000\2405E\321\"\033>\025\035\211>\231\273\366>\342\351U>\370\302\204>hy\236=R\270fA\354Q\204A\315L\274B\315L DS\263\307=gD\351=\275\373\243=]\371,=\357\311C>YQ\203=<\275\262>\013FE?\370S+@\\\217\000B\251\372\225;\r\032\372<RI\035=3\247K<\250o\231<\215\r];)\\\205A{\024\254A\315\314\336Bf\206WDo\201\004>_\230\254>\211A\300>)\313\020>HP\234>\232|\263=-\262\031AR\270\206A\\\217vB\000@\214C\336\260\255=L\375\274=\211{\254=\271\302\273<\205|P>\205\353\221=[\323<>\345aq?y\351\266?\270\036AA\306\031\303;\023,\016=g\362M=\207m\013<)\\\217<{\026\204;\000\000,A\\\217\270A\000\200\216B\315\314\260C\266\204\374=2\346\256>[B\336>0L\246=\254\255\230>L7\311=\303\3650A)\\oA\341\372\216B3\363\272C\363\216\323={N\272=\246\017]=\355\330\010=\306\3345>\222t\215=A\361#>\\\217R?\244p\255?\315\314,A\353\001\363;\213\303\231<t\357\341<xz%<!Y\300<$+?;R\270>A33\237A\037\205\237B\000\000\334C\0054\021>\323Mb>\350jk>\366(\334=\336\002\251>Z\365\271=\244p\235A\244p\255Af\346\001C\000@\225D\177\244\310=\025\035\t>m\305>>\367\344\341=a2U>\036\026j=\267b\037?\016-\022@7\211\245@\354Q\207B8\330\233;\n\364\t=\241\3701=\221\362\223<\204\330\031=|{W;\000\000\266A\327\243\nB\232\231\035C\000\200\300DGr\371=\263\014\261>|a\362>y\351f>\240\032\317> )\242=)\\;A33wA\\\017\226Bf&\322C\037\205\353=i\035\225=\364\025$=\270\036\005=\273\270M>->\205=io\260>\337O=?R\270\026@q=\304A\342<\034<\204\2733<\373?\207<&\2527<a\375\237<_)K;\303\365PA\256G\221A\354Q\250B\232\031\001D\006\201\025>\035Z\344=\033\236\336=\002\016\241=h\221\215>\354\335\237=\366($A)\\kAff\204B\315\314\240C$b\312=\212\223\273=\202\255\022=\374\336\246<\0358\'>`v\217=V\016\255>u\223 @L7\031@\327\243\232A\2176\216<\374R?=\244\344\325<.VT<+\207\026=6r\335;{\024.A\n\327\233A\256\307\215B\315\214\262C\226C\013>\302\206\'>\202\255\222=\374\336&=\331=y>\221\325\255=\303\365@A33\227A\354Q\231Bf\246\336C\313\276\253=~Rm=r\026\366;A\021\013<d;\037>\340\271w=\376\324x>\274t\223?P\215\307?\366(\220A5F\353;\222\2213<]\032\277;g\017\264;\215]\242<t|4;q=ZA\341z\330A{\024\255Bf\246\014D]\376\003>\336q\n>\326\2208=\372\233P=\274t\223>3\212\245=\366(lA\n\327kAq\275\275B\315,\'D\217\302\265=\233U\237=b\276<=\303\201\020=\032\300\033>\320\'r={\203\257>\303\323\313>5^\"@\341z\350A\345\016\233;8\276v<+\366\227<9\321.<f1\261<\376b6;\366(\212A\244p\217Aff\344B33\\D#\333\371=\273\270M>-C\\>7\032\000>I.\237>u\253\247=\037\2057Aq=\200A=\n\222B\232Y\311Ca\340\271=/\027q=R\355\323<\3377\276<TR\'>\242\177\202=\373\313.>\252\361B?\037\205\213?\000\000DA\331\225\026<\351\014\014<u\002\032<\017\356\316;\005\305\217<\2452E;\366(HA\354Q\246A\nW\237Bf\346\355C?\306\034>B`\345=\317,\311=a\032\206=\241\370\221>\\w\263=33?A)\\oA\303u\232B\232Y\325C\215(\355=\"\375\366=M\333?<\033d\222<6\315{>e\307\206=\376\324\270>ff\206?\270\036\035@33\325A\355\r\276;*\000\306<\256\016\000<\024\\,<#\370\337<@\024L;\303\365LA\217\302\215A\024.\246B\232\031\370C8g\004>%\006A>\026\301\377<\"7C=\345\362\237>vq\233=\\\217:A\\\217\210Aff\223B\000\200\322Cj\331\232=O\257\024=\344\025\010<\320a><C\034+>\344\275j=\330\360\264>h\",?ff\016@q=\320A5\266\327;\302\024\345;\324\357\302;\255N\316;\343\210\265<\235\331.;\341zTA\205\353\235AR8\247B\000\240\007D\231\360\313=\344\240\204=@\207\371<O\222.=\303\323\213>\250\306\213=\000\000|A\217\302\231A33\326Bf\246=D\000\221\376=\327\022r>a2\225>\222\\\376=33s>\236\265\233=\3578\005?\325x\251?+\207^@H\341LB\251\330\030<\rT\206=b\326\313=\373\005\273<\221\nc=\1770\360;H\341\212A)\\\301A\315\314\356B3\323dDR\270\036>w-\001?W\354/?\276\237Z>\020X\331>=\n\327=\n\327\315A\024\256\213A33.C\000@\373D\261P\353=\241\370q>\rq\254>&\344C>^KH>V\267z=6\253~?\225\324Y?\240\032\347@\232\031\031C\013\263\320;\024\313-=A\274.=\033\022w<\200H\277<\340\326];\037\205\004B\327\243\274A\315LeC\000 JE\010\254\034>\271\374\027?F%%?q\033\215>\221\355\274>\375\207\264=\256GqA\205\353\315A\000\000\304Bf&3D\027\267\321=\262\021\310=\221\355\374=\2304\206=\036\247(>\372a\204=9E\'?\234\304\300?h\221\205@\341z}B\024\\,<\304%\307<\0162I=F\010\217<\237\253\255<[{\237;{\024\224AH\341\004Bff\362B\000@\203D\347\373)> Aq>\351H\316>-C\034>\202\342\207>MJ\301=q=2A\270\036aA\341z\216B\315L\300C\266\370\224=\246ax=Y\2068=6\002q<V\016->\341(y=\231*\330>\273\'O?\270\036U@R\270\346AG\221\265;E\273\n=Y\2068=6\002q<\250\035\376<^M\236;\205\353AA\270\036}Aq=\237B\000\300\342C\343\210\265=I\235\000>\375\366\365=\'\245 =&\344\203>\210\272\217=\303\365HA\\\217\230A\n\327\243Bf\346\362C\241g\263=\030\225\324=\252\361\322=\371\3323=\255\372\034>\361K}=\"l\270>\033/\275?h\221M@\205\353\333Azn!<2w-=\032n\200=\002\016\241<\327/\330<\031\312\211;\205\353UA\244p\263A=\n\262B\232\331\010D\367u\340=;\001M>\375\207t>H\277\275=\2760Y>\3225\223=\315\314PAR\270\224A\024.\252B\000\000\000D\366\227\335=\224\207\005>`\253\304=\267\177e=NbP>\366#\205=\367\006\237>\256G\301?\217\302%@\\\217\254A\335\321\377;\002\016!=5cQ=\222\256\231<\214J\352<\345D\273;=\ncA\315\314\306A\244p\274B\315\314\023D\360\205\t>\360\026\210>\323\274\203>\267\321\000>\267b\237>\010U\252=\205\353]A\024\256\201A=\n\261B\315l\024D\200\016\263=\313\363`=r\026v<\211\014\253<N\321\021>\272\367p=\2343\202>\311v\256?\004V\336?\205\353\245A\371\276\270;\224\022\002<\277)\254;\370\373\305;\016\370|<\r\306\010;\217\302qA\327\243\314A\341z\301B\232\231-Dh\"\354=;p\316=>yX=\342\222c=j\336q>\233\254\221=J\014\016A\n\327wA\303\365bB\000\000qC4\327\251=\261\247\235=F_A=0\r\303<\313\241E>\034\231\207=\354\300\t?\232\231\231?/\335\210@\244p\361A\276\0233<p|\355<<\245\003=8\276v<4h\350<\r\306\210;-\262\037A\232\231\215A=\212\202B\000\000\227C;\337\317=$\227\377=\010Z\301=0\rC=\331=y>\327/\230=\333\371\026A\\\217\222A\256GoB\315L\213C\251\244\316=0\365s=\322\000\336<\352[f<\3436\032>4\205\216=\274\005\002?\262\235\237?\207\026Q@\n\327\363A\206\000\340;=)\023<!Y\300<6\037\327;\261\026\237<\226\3141;\354Q@A\366(\310A{\224\227B\315\314\333C\314\177\010>\320\325\326=\214J\352=\017\356N=#J{>\022\240\246=\327\243HA\\\217\220A\n\327\236B3\363\365C\016J\230=\207\026\331<\376\177\234:\206\215\262;\232w\034>\252`T=a\303\263>&\344s?V\016\025@ff\342AR\177\275;\275\307\231;\236\332O:1\013m;\321\\\247<\227\254\212:\037\205[A\n\327\247A\327\243\255B\315l\022D\025R\276=\342;1=6\257j;o\360\205<\301\250d>\342#b=\315\314TA\\\217\254A\341z\252Bf\206\010De\302\257=\340\204\202=b\370\010=\367\222\306<#\3339>\344Ni=\3711\206>\364\375\304?\301\312\001@\n\327\247A\221(\264;\302\206\247<\341\013\223<\264\256\321;\351\324\225<<0\000;33cA\232\231\351AH\341\271B\315L\033D\325x\351=h\263*>\2657\370=\016\363e=\260\003\207>\030[\210=\366(LAR\270\226Aq\275\243B\315L\370C\033*\306=b\333\242=r3\334<G\346\221<!\0374>tA}=x\234b>\341z\244?\341z\304?{\024\212AP\303\267;\037\327\206<\350\202z<u\312#<\242b\234<\315\311\013;\000\000\\A\205\353\317A\327\243\257B\315\354\020DK\352\004>HP<>\022\203\000>\322:\252=(~\214>\367;\224=\000\000\204A\354Q\222A33\325Bf\206QD\211^\306=\265l\255=\206\033p=\246\nF=\207\026\031>\333\026e=M\204\255>\'1\270?\031\004\026@\354Q\006B!\314\355;\230\335\223<\323\023\226<)?)<\301\305\212<6#\003;=\n\221A\232\231\313Aff\352B\000@|D\336\002\t>\372\355+>\214J*>\313\326\272=F%u>1|\204=ffVA\232\231\207A\303\365\252B\232\031\nD\275\214\242=\344Ni=\343\252\262<\031Vq<\303\365(>Q\203i=\2343\">?\306\034?\246\233\204?\037\205SA\213\373\217;\315\314L<Z\273m< \263\263;w\204S<\362\353\007;\024\256kA\232\231\255A\037\205\273B\000\340%D\"l\370=V\237+>q\254\013>\001\030\217=\326V\214>\204G\233=\037\205\243Aq=\256A\315\314\005C\000\240\241DZd\273=\371\240\347=\373\256\310=\322o\237=\346\256%>^\235c=]\376\023?h\263j?\333\371\206@H\341\220Bzl\313;\270#\234<\\\217\302<\310^o<\261\277l<\277\322\371:\341z\302A\303\365\322A33!C\000\200\336D\202\342\007>jMs>\250W\212>j\2744>\257\224\205>\314\356\211=\232\231\241A\327\243\326A3\263\005C\000@\232D\272\332\312=\325\347*>\325\t(>7\211\001>\000\000@>F\224v=\261\341y?\016-\362?\223\030\344@33\317B\273C\n<qr?=\355\323q=\306\277\317<+\366\027=\223q\214;\037\205\301Aq=\007B\000\000 C\000\340\320D\001\336\002>2\346\256>\366\227\275>d]\\>\247y\247>\251M\234=)\\CA\366(\220A\270\236\234B33\345C\006\r\275=\252\361\222=u\3453=E\r\246<h\221->\302Qr=\345a\201>TRG?;\337\357?\\\217\224A\300\"\277;\361hc<\n\327\243<\021:\350;\316\302\236<Xs\000;\327\243dA\354Q\300A3\263\273Bf&\034DM\025\014>?5^>Y\027w>c\321\264=\370\302\244>P\374\230=\024\256\255A\000\000\212Af\346\014C\000@\301D0/\300=\212Y\257=\3274\357=\373\\\255= \322/>\010\003O=\372~\232?+\207\206?\274t\367@\232\031`C\305s\266;\25106<N\264\253<\322\035D<\017\356N<\244R\354:\000\000\366A\037\205\323A\000\200GC\000pDE:\222\013>\013\265&>\263{\222>5^:>\022\203\200>C\377\204={\024\260A33\257A33\023C\000@\271D\320\263\331=\360\026H>\332\254z>\320\263\031>\021\307:>\221~{=%\006\201?\245,3?\266\363\361@33\002C\342Y\202;\250\030\347<\024y\022=6\002q<\211\265x<P\306x;\256G\335Aff\316A\000\000CC\0000\013Eo\201\004>y\351\306>\330\201\363>l\ty>\326V\214>t\230\257=\315\314\202A\354Q\272A\000\000\332B\232\031RD#\204\307=\365J\031>Gr9>\311\253\263=R\270^>u\260~=?\306\334>\345\320\202??5>@\000\0006B\316\245\270;\271p =\211\265x=\326\250\207<\372\362\002=w\333\205;=\n\233Aq=\370A\315L\001C\000\240\221D`\345\020>\027\331\356>]m5?\3711f>\"\375\366>\014\345\304==\nsA)\\SA\315L\303B3\3631D\016\025\243=!\002\216=/\372\n=T\251\331<\373:0>\016\025c=F\2246>33\323>\226C\253?\217\302\215A\264;\244;jMs<\250\035~<\332\376\025<\030\354\206<\256\232\347:\232\231\201A\024\256{A\000\000\321Bf\306LD\324\232\346=j\3361>\003x\013>F|\247=6\253~>S\221\212=\303\365\252A\232\231qA\315L\rC\000@\255D;\001\315=\321\"\033>9\326E>\022\203\000>\003\tJ>tA}=\373\313\256>P\215\247?J\014\032@q=\034B\373\007\221;\321\"\333<\217\307\014=\201\t\\<L7\211<\r\031\217;\037\205\265AR\270\256A\232\031\030C\000\340\277D!\037\364=sh\221>_\007\316>\203QI>\250\306\213>\314z\261=\270\036\245A\315\314\212A\315\314\006C\000\340\246D?t\301=d]\334=d]\034>\227\034\267=\323\336 >\376``=q\033\035?\354Q(?\331\316\203@=\n\232B\245\205\313;\010=\233<\245\240\333<\323\331I<R\017Q<\242C\340:\303\365\312A)\\\271A\315\314&C\000@\363D\345\362\037>\177j\234>\330\360\324>\320DX>C\255\211>\205|\220==\n[A\\\217\200A\024\256\257Bf\306\020Dd\006\252=\036\212\202=5c\321<(a\246<[\261?>\3063h=\215\227.>\212\260\001?\262\235\257?\000\000`A\320\233\212;\315\001\202<j\207?<\325\225\317;\252+\237<\000\254\016;\244pmA\024\256\241A\354Q\306Bf\246\'D\323M\342=b\241V>\225\324\t>\001\030\217=:#\252>k\267\235=)\\\201A\\\217\200A\232\231\324B\000 ED\250W\312=O@\023>e6\210=\246\017]=\250\306K>5\230\206=!\2602>5^\372>\010\254\254?\\\217nA\237\310\223;ep\224<o\323\237<\340\363C<\353n\236<\2278r;\217\302\207A\270\036\231A33\342B\000`WD\221\355\374=\\\217\202>>yX>7\032\000>\000o\241>4\200\267=\270\036)A\217\302\241A\315L\214Bf&\251C\246\320\271=\347\373)>\325xi>\346Ws=\033\r`>V\016\255=\035Z\344=h\221\235?d;\027@\307K\347@d?\013<U\207\234=\033/\035>\336\037\357<\363v\204<\202\342G<\232\231-A\\\217\266A\037\005\231B3\363\257C\036\026\352=\365J\271>5^\032?\031\004\026>f\367\204>\217\302\365=)\\WA\024\256\341A\256\307\253Bf\206\014D\273\362\231=\264\223A=\233=P<`\0027<\252\202\021>o\rl=\037\364,>33\223?33\263?\\\217nA\200\360\241;z\031E<\253\005\366;\232\264\251;\335Al<\252\271\334:=\nkA\037\205\016BR8\302Bf&*D\034\353\342=a2\025>\003}\242=.\312l=\314\356\211>\372\233\220=\\\217ZAffrA=\212\260Bf&\021D\"T\251=B\225\232=\377\t.=\240l\312<4\2007>\207\212q=\227\220\017>\332\254\n?\221\355\214?\232\2315Am\311\252;\004s\364<l!\310<\233\347\010<9\356\224<\276\203\237;\327\243hA\270\036\235A\205\353\303B\000@$D\\\217\002>\300\354\236>f\210\203>\365\333\327=\026j\255>\341b\305=\256G1A\327\243\226A\232\231\222B\315\314\264Cl\t\371=\321\221\\>\037\364,>ke\202=\323\336`>\345\320\242=>yX>\274t\203?1\010\334?\n\327_A\244\245\362;\271S:=\253\354;=\273a[<\200`\216<zS\221;\n\327SA\256G\003B\037\205\267B\315\014\376C@\244_>7\032p?Y\027W?\223:\201>O\257\324>\316\252\017>\354Q4A)\\OA\354Q\222Bf&\301CmV\375=f\210\343=\301\312\241=\370Sc=\251\244N>F\231\215=\245,\203>d]|?P\215\347?\354Q\200Ajj\331;d\222\221<*\035\254<\263\265><\367\257\254<\005\334s;\244pMAq=\244A)\334\251B\315\014\356C/\335$>\307\272x>\302\027f>\224\366\006>_)\253>$\271\274=\327\2430AH\341nA\nW\215B\232Y\272C\342\222\243=Y\372\220=\201>\021=\357\346\251<q\033M>\017\326\177=\013$(>\317\367\203?\317\367\243?H\341:A\021\212\255;\315\344\233<\356%\215<\266\020\344;u\002\232<\'i\376:\244pAA\327\243\246A\303u\237B\315\214\337C\211A\340=\361\364J>\367\006\037>iR\212=A\361\243>\336<\225=\315\314@A\217\302\265A\000\200\235Bf\346\337C_\007\216=\032\300\333=2\254\242=0\365\363<\331_\366=W`\210=\375\207\364=P\215\267?\201\225\343?\264\310\030A]7\245;\021\307:=2U0=\206\217\210<\250W\312<a\033\361;\270\036IA\024\256\345AR\270\256B33\364C\0324\264=\212\216\244>+\030\225>@\244\337=\300[`>\257w\277=q=FA\n\327\213A\256G\241B3s\347C\317f\325=\024\320\004>\031Vq=\372\355\353<k+6>\030\354\206=\224\207\205>\356|_?\356|\007@\232\231\231A\201\t\334;\276\301\027=\303\330B=#2,<\247\221\226<-\223\341;H\341bA=\n\271A\303u\276B\000 \026D\363\037\022>+\366\267>\257%\244>2\311\310=2U\220>f\367\344=\341zTA\037\205[A{\224\253B3s\007D5F\253=\262\235\257=4\364O=o\236\352<\257\224%>W!e=\377\262;>\202\342\007?\250\306\313?\366(tA\277\363\213;\366\321\251<u\253\347<^\275\n<\310^o<\336>+;\n\327cA\303\365\212A\024.\301B\315\354\033D\373\313\356=\325x\211><\275\222>\360\334\273=M\025\214>\342\351\225=\232\231iA\354Q\272A\244\360\273B\315,&D\257\316\261=\300\347\207=\303\323\253=q\346W=\324\232&>\340\326]=\241\326\324>\211A\320?\372~:@=\n\004B\016/\010<c\264\216<>\320\n=\036\033\201<r\212\216<c\'<;\327\243|A\024\256\375Aff\314B\315\214=DKY\006>\367\344!>\303\365\210>_)\013>\022\245}>T\000\214=)\\CA\244paA\\\217\235B\000\000\347CE\r\246=\r7\240=\016\020\214=\325\225\317<\347\214(>^\021|=\314\177\210>\335\265T??5\006@\024\256\237A\321W\220;\322\343\367<$\3561=\026\0302<J^\235<%t\227;{\024RA\354Q\232A\315L\257B\232y\004D\363\037\322=5\357x>\277}\235>\354/\273=\371\017\211>,\267\264={\024^A\256G\201Aq\275\260Bf&\025Dz\344\217=\265\340E=\302\206\247<\362`\013<\212\216$>\r7`=e\031\202>I.\037?\203\300\332?\303\365\270AvQt;g\325g<b\333\242<y\346\345;\030\354\206<\036\033\001;\366(xA\217\302\237A\354Q\307B3S:D\230\300\255=\266\204\374=\322o\337=\345\3259=\201&\202>\230\243\207=\354Q4A\000\000xA\217\302\222B\000\000\304C\261P\253=\257%\344=\315;\316={\332\341<\020X9>^\205\224=L7\251>u\223\210?\177j$@\217\302\267A\340\020*<\304\224\210=\217\374\301=\264\260\247<\221\270G<\305\003J<\327\243@A\244p\227A\303u\237B\000\000\341C\212\260\341= \322\217>\332\254\232>\032i\251=v\340\\>=\233\325=ff\234A\024\256\271Af\346\000C\000\300\222D\027\331\316=\224\366\006>\355\r>>\316\031\321=q\254K>6\002q=\326V\034?\006\2015@\211A\254@33\214B\372\'8<)\320\'=\022\367\230=\200\361\014=+\301\342<\352x\314;\\\217\246A\037\205\363A\000\000\016C\000 \244D7\032\000>\2201w>x\013\304>H\341:>&\344\203>`\260\233=\366($A\037\205CA\000\200\203B\315\314\240C\324\267\314=\315u\232=<\210\235<\3647\241<\354Q8>{\210\206=\270\257C>\0216\014?D\213\254?{\024>A\0220\272;@\244_<\3172\013<\252\014\343;\316\302\236<\307b\033;{\0246AffzA\303u\222B\000@\305C\360\205\t>\303\365(>io\260=S\"\211=\331_\226>\205%\236=w\276\013AR\270\206A{\024]B\315LjC\206\311\324=\035 \230=\000\000\000\000\000\000\000\000\226CK>\366]\221=\217S\004?V\016\005@!\260J@\315\314\346A\362\230\201<\002\016\241<\000\000\000\000\000\000\000\000\343\307\230<\252\271\334;R\270\"Aff\266A\037\005\200B\000\200\236C\006\201\025>\335$\006>\000\000\000\000\000\000\000\0005^z>\"\216\265=\n\327wA\217\302\237A\315\314\314B\315,:Dh\221\355=\345\362\037>n\243A>^\242\272=\224\207E>\374\035\212=\313\241%?5^\252?\232\231\225@\354\321\205B\3130\356;\234\334\357<3\247K=RD\206<A\267\227<\227\254\212;\232\231\251A\256G\353A\232\031\016C\000\340\251Dh\",>yX\310>$(\016?\2760Y>\245,\243>\362\260\320=H\341\254Aq=\262Aff\020C\000\340\257Di\000\357=t\265U>;\337\217>\345\362\037>\210c]>wJ\207=\222\313\037?\032\300k?V\016\205@\341\372\241B\227\342\252;\361\235\030=\321?A=\243\006S<\302\206\247<P\375\203;\n\327\321A\205\353\345A\000\000,C\000\020\002E\007\316\031>\356Z\022?\212\2164?G\003x>]\376\303>\315;\316=\232\231AA\217\302\215A\327#\234B\232\031\337C<\275\322=\006\330\307=d\351C=\243;\010=KYF>\304Z|=\216u\221>\274t\323?d;\357?\217\302\261A\315v\005<\215\234\205<\203\372\226<\235/\366;\235\021\245<\336\252\353:\303\365XAff\316A\366\250\260B\000\340\013D\005\243\022>\"\2165>\257%$>\343S\200=\332\033\234>\325\004\221=\303\365`A\244p\211A\000\200\263BfF\030D\370\302\244=)\226[=\245\240\333<5)\005=\325\t(>\354\027l=u\002\032>\024\256\327?\004V\236?R\270JA7\377\257;}\221P<\205w9<\332\376\025<\013\322\214<\232D\275:R\270nAR\270\312A\n\327\300B\000 +D\032Q\332=\332\033\374=\304B\255=l\004\242=w-\201>2Z\207=\366(XA\270\036\227A33\260Bf\206\013D\031\342\330=\325\347\352=\351\267\257=\340g\\=5\3578>\357\376x=\365\271Z>\372~\252?\374\251\301?\354Q\232A\316R\262;DQ\240<\363T\007=#\370_<\031sW<\017{!;\315\314lA\232\231\331A\366\250\302B\315\314(D*:\022>\201\225\203>\216\006\260>\206\311\024>\314\177\210>\307h\235=\315\314LA\024\256\213A\232\031\246Bf&\376C\272\275\244=k+\266=\342X\227=\\=\'=w-!>\037\205k=\032Q\272>\205\353\241?\203\300*@\\\217\364A\245\242\261;\375j\016=\307):=+\301b<\305\033\231<xD\205;\n\327[A\341z\250A\244p\265B\000\300\023D\236A\303=~\2149>\223\251B>\357\346\251=:\222K>\010r\220=\303\3650A\256GmA\270\236\214B\232\031\275C\"\211\236=\033LC=\303*\336<\333o\355;\033/\035>\203\206~=\266\363=>R\'0?\374\251\241?\024\256OA\025\217\213;S\256p<\300\354\236<\270\223\210;)\"C<\003\315g;H\341JA\315\314\242A{\224\241B\232Y\370CB`\345=\334h@>\275\343T>\342\222c=\246\233\204>L\216\273=\315\314<A{\024\212A\037\205\226B3\363\327C\r\032\272=BC\177=\277\267\351<Z/\206<\377!=>\312\211v=\216\006\260>\205\353\221?ff\016@\341z\310A\367\002\263;\021\344\240<\312O\252<\265\341\260;\337\375q<\325BI;33WA\205\353\303A\000\000\254B\000\200\014Dm\305\376=\016\2760>\252`\024>\273a[=\351H\216>nQ\246=\256G\217A\366(\250A\315\314\370B\000\200xDm\347\373=&\344\203>\334F\243>\264Y\365=\007_X>\027\267\221=\004V\316>\275RF?;\337G@=\n&B\013\226\352;\016J\030=\266\204|=#2,<\260U\202<\203\025\247;ff\246Aq=\336A\232\231\025C\000\000\243D\222\313?>\247y\027?9Eg?\025\035I>\335$\246>\264Y\365=H\341>A\\\217.A\256G\230B\232Y\335C\325\262\265=[\266V=\310{\325<\332 \223<A\361#>\231\365b=\\ \201>\217\302\205?o\022\323?\232\231\227A\250W\312;lCE<\237qa<]\032\277;\222\2213<\225f\363:\315\314\\A\270\036\241A\256G\257B\000`\023D\226\262\014>\256G!>\232\010\033>\013\322\214=m\347{>\313\271\224=)\\OA\354Q\222A)\\\250B\315L\003Di\214\226=\202\305\241=\272,&=_A\232<\311\345?>\200\237q=W[q>\242E\246?sh\031@\024\256\241A\204\324m;\240\025\030=\330d\r=V}.<\n\235\327<\226\317r;{\024bAH\341\304A\270\236\300B\232y\033D\324\016\277=\373\\m>\346?$>\363T\207=\3122\244>\'k\224==\nOA)\\\201A)\\\246B\315\314\375CiR\312=\026\366\264=\021\001\007=\357\311\303<\374\2511>\266\363}=\230L\025>\024\256g?)\\\177?\217\3025A\3233=;\316\210R<\020#\204<\362w\357;\2760\231<\254<\001;\217\302]A\366(\270AHa\263B\2329\021D\216\006\360=\314\177H>\020X9>G\311\253=p\316\250>\271p\240=\244pEA33oA{\224\234B\315\214\352C\257\316\261=i:;=\360\304\254<\201C\250<\323\336 >\270\314i=\346?\304>\225eh?+\207&@33\361A\017a\374;\326\035\013<\216#V<U\301(<jM\363<\362\261\273:H\341RA\315\314\206AR8\250BfF\005Db\241\326=\374\035\212=m\220I=?RD=\261Pk>\356\261t==\n/AR\270\224A\256\307\214B\000\000\271C\204\236\315=\343\307\230=\231\201J=\1770\360<\231*\030>\247y\207=\356Z\302>\240\032\337?\351&A@q=\316A\224\365\033<9\321\256<S\005\243<6<=<\312O\252<C\0031;ffFA\327\243\314A\037\205\245B33\354C:\222\013>yX(>\274\226\020>\230\206\241=\235\200f>\363Y\236=\270\036\201A\217\302mA\232\231\320B\000\000HD%u\302=\271\031\256=\256Ga=\205w9=\374\2511>\327\243p=\306mt>\212\037#?\337O\335?\327\243\256A\034\262\201;\007%L<\332\376\225<\224O\017<\217\302u<\274w\324:\024\256\215A\327\243\234A\315\314\347B\232\371lD\"\375\366=2U0>D\213l>\0358\347=\315;\216>\023\233\217=\232\231MA\303\365\252A\217B\245B\000\240\000D\375\244\232=\312O\252=\304\353z=\324\361\230<\301\312!>\360mz=@\244\377>\335$\346?\370S#@\303\365$B\354\367\304;4\2007=\317\367S=\236\265[<\375\244\332<TT\375;fffA{\024\330A\217B\267B3s!D\217\215\300=\024?F>\0216<>\276je=m\305~>\267\356\246=\205\353\217A\256G\245A\232\231\353B\315\354wD=,\324=\224\207\005>\375\366\365=,\267\264=\026\373K>\024\226x=^K\350>\227\220_?m\347C@q=GB\006\362\354;\016\025\343<\213\211\315<\263{r<u\253g<\313\240Z;\327\243\250A\256G\313A\232\031\nC\000\240\250D\276\301\027>d;\277>\336\002\251>:#J>\010\254\234>5$\256=\354QDA)\\\217A\354\321\234B\315\014\351Cj\336\261=\t\247\205=\306\205\003=qU\331<\203QI>\314@e=C\034\253>\317\367\343?V\016\005@\354Q\316A \360\300;6<\275<\\\254\250<\305 0<\2240\323<\363\221\024;\232\231aA=\n\347A\000\000\262B\315\214\030D\266\363\375=\331\3167>;\001\r>\"7\303=`\345\260>\347:\215=\217\3025A\\\217\214A\341\372\220Bf\346\307Cni\265=\330\236Y=\275\373\343<1\010\254<A\361#>M2r=\3122D>=\n\307?\266\363\255?\\\217ZA\374\246\260;\276\370\"<\301\213><\350i\300;\236\265[<\315r\331:\315\314PA\256G\021B\327#\252B3S\002D\206\311\024>\302\027&>Gr9>\222\"\262=\2657\230>\033\236\236=\327\2430A\327\243\206A\n\327\215B\232\231\272C\321\221\334=o\323\237=@\207\371<_)\313<{\203/>\334\327\201=\272kI>7\211\261?\250\306\253?\327\243XAq\004\251;\267E\031<\332\003-<\3643\365;\022\275\214<R\014\020;\\\217FA\037\205\323A)\334\237B3\263\353C\203/\014>\276\301\027>\210\205\332=\327/\230=c\177\231>#g\241=\035Z\026A\244p\255A\000\000oBff\206C\2034\243=N\356w=P\374\030=\310\010\250;%u\002> \265\211=\217\344\362=\307K\227?\242E\226?\374\251\331@,\267\264;\330\r\333<P\374\030=\310\010\250;o\323\237<\376,\226;\244p\037A\205\353\337AR8\205B\000\200\226C\255i\336=\223:A>\200H?>\372\n\322<jMs>\364\211\274=\n\327oAH\341\260A\\\017\303B\315l-D c\256=\205\353\321=\352x\214=\316\302\036=\313\020G>M2r=\212\037\243>\014\002\253?\n\327\023@{\024\344A\353\310\221;\007\010\346<\326\250\007=\340\363C<\270#\234<C\220\203;{\024\206Aff\374Aff\334Bf\306XD\321\221\334=\226C\253>\322o\237>o\360\005>\023\362\241>\342u\275={\024rA\341z\356A\205k\301B\000\3403D\303d\252=\355\236<=E\360?=\376`\340<\022\245=>\235\327X=\316\252\357>\211A\320?\203\300B@\037\2055B\225\326\337;\270\314i<\035\346\313<\244\341\024<\241\020\001=B`\345:{\024\212A\327\243\023B33\334B\232\331hDC\034\353=A\016\312=\255i\036>\360\247\206=\224\207\245>\266\204|=q=>A)\\\251A\256\307\230Bf\346\330C\253&\310=0L\246=<N\321<\361\200\262<\340\276N>\267\321\200=z\245\214>\347\373\231?=\n\367?q=\234A\243\036\"<\r\032\372<\224\207\205<]\372\027<\261\371\270<\326\345\024;\315\314PA\024\256\331A\024.\252B\232\271\002D\274\005\022>\345\362_> c\356=\3539\251=\244p\235>i\214\226=\341z\026A\232\231\255AffnB\232\231\207C\253\317\325=\314E|=\264\260\247<g\362M<)\\O>@0\207=-C\334>\'18@u\2230@)\\\311A\n\200q<S\"\211<#\370_<e\035\016<O]\371<\266g\226;\232\231-A\205\353\371A\303u\211B3\263\263C-C\034>\217S\364=\r\211{=Qk\032=\341\013\223>\340\020\252=\000\000xA\327\243\250A\315\314\315Bf\306HDB`\345=\323\336 >Q\332\033>\336\260\255=\006\201U>!\223\214=)\\\257?\226C\233?\264\310\026A\000\2000C\347P\006<\037K\037=\205\0108=\025:\257<\207P\245<\301\213\276;)\\\271A33\335A\232\031\035C\000\200\332D?W\033>\004\347\314>k\232\327>\210\205Z>\354\300\231>b\241\326=33KAR\270BA\217\302\241B\000\200\367C\263\352\263=~Rm=\312T\301<\227\305\304<e\031\">\022\203\200=\013\265f>\230L%?\274t\303?\303\365\212A\216\346\310;\017\356N<O\257\024<Q\333\006<7T\214<Q\243\220;ffZA)\\\207Aq=\260B\232\271\rD\271\215\006>\212\216$>n4\300=rm\250={\024\216>\236\322\301=\\\2172A\256G\253Af\346\215Bf&\276C\205|\320=\340\333t=\376\267\022<\266J0<B`%>\202\250{=!\260\222>\264\310\326?m\347\373?\205\353\227A\201\\\342;\236\262\032<`u\344;p\321\311;F\261\334<\021\001\007;\217\302EA)\\\347A\037\205\236B\000\000\345C\334F\003>\034\353\342=\376\267\022=\257_0=\007_\230>\t\341\221=\270\0369A\354Q\230Aff\224B\232\331\314C\247\005\257=\205%\236=e\252`=\251\366i<r\371O>!Y\200=\005\243\222>\354Q\270?\033/\r@ff\242AJ|\356;\264\260\247<-&6=\256)\020<\315\006\231< \323Z;\270\036QA\n\327\327A)\334\254B\000 \002D\222\313\377=KYF>o\022\203>\215z\210=Zd\233>\005\250\251==\nkA\024\256_A\244p\304Bf\006$D\030&\323=\243\001<>\341z\024>%\006\201==\233U>\305\254\227=\303\323\013?sh\301?\244p\231@\315\314EB`r#<S\313V=\327/X=\000o\201<qU\331<\225c\262;\024\256\203AR\270\222A33\344B\315LJDKY\006>\254\034\272>\024\320\244>\034\353\342=\016\276\220>p\224\274=\217\3029A\366(\200A\205\353\226B\232\031\314C\211\322\336=\3274\357=\270X\221=v28=\\ A>\000o\201=\221~{>\337\340;?B`\325?q=~A\222\316\300;\346?\244<\022\210\327<\271\245U<^c\227<q\344\001;q=JA)\\\235A)\334\243B\232\331\355C`\345\020>?5^>\214\271k>\323M\342=\304\261\216>\337\032\230=\\\217ZA=\n\231A\205\353\262B3\323\017D\304|\271=\325\347\352=~\306\305=z\031E=6<=>|,}=\035\311e>\270\036e?y\351\346?H\341\232A\251j\202;\000\035\346<AH\026=o\273P<\371\203\201<U\241\201;q=rA\000\000\314A\315\314\312B331D\325\347\352=\201&\242>Zd\273>\251\023\020>(~\214>\321\005\265=;\337\033A\303\365\230AR\270wB\232\331\220C\366(\334=\353\250\252=\351_\022<\373\"\241<\023\362\201>4\364\217=\323M2?\262\235\337?\213l\223@{\024.B\216#V<Qk\232<\317K\305;\024\\,<\266\363\375<\336q\212;)\\3A)\\\271A{\224\217B3s\276C\273\'\017>\336q\n>\237\315\252<\'\367;=\234\242\243>:\006\244=\341z Aq=\252A\217\302|Bf\246\231Cu<\246=K< =\271\337!;\324\014\251;y\351&>\350\336\203=\333\212=>\343\245\253?P\215\227?\232\2319Ad\220\273;\346\255\272;\362\353\007;>%g;\261\277l<\336\001\036;\217\3021A\037\205\347A\n\327\213Bf&\274C\324\232\346=\376H\221=\250WJ<\215E\323<\240\211p>\333\026\245=\024\256\'A\024\256oA\341\372\206B\315\314\246C\034\010\311=`v\317=\245\275\201=\325\262\265<\270\036E>\204\236\215=0\273\247>\211A\220?\223\030$@\366(\246A\266M\361;od\036=\216\222W=\001\030O<t\007\261<\372D\236;{\024BA\\\217\254A\354\321\242B33\334C\202\342\007>,e\231>\020z\226>6\253\276=\276\237\232>\322\214\305=\315\314,A\n\327\257A{\224\211B3\363\263C\226>\264=\270;k=\211\007\024=\007\010f<;pN>c\321t=\333\212\235>\356|\317?)\\\017@\232\231\241A\252f\326;\323\366\257<\321\005\365<z6+<|\017\227<\266J0;\366(LA\366(\000BHa\247B\000\300\364C]m\005>\237\253->&SE>\365J\231=\331\316\227>\362\352\234={\0242A\303\365\204A\244\360\214B\315\214\276C\267\356\246=g\n\035=\006L`<\367u`<\365\271\032>t\322{=`\345\020>\336\223w?\331\316w?\226C\033A.\306\300;\3329\315;\022\372\031<\030\315\312;\311\223\244<q\307\033;H\341:A\354Q\242A3\263\224B\315\214\322C\252\361\322=\361\272~=\310\230;=j\244%=\352\004t>R\017\221=\037\205KA)\\\215A\303\365\241Bf\246\372C\310\265\241=\23389=$\264e<\275R\226<\317f\025>\016\025c=\253>\227>\2343b?\333\371\006@\205\353\271A8k\360;!Y@<\340c\260;%A\270;\300\354\236<;\252\232:\270\036]A\024\256\247Aq\275\261B3\263\022D\365\271\332=\335\265\304=\032\027\016=\221\362\023=-\262]>\264\310v=ffnAq=\264A33\314B\000@+D\355\266\313=\n\327c>\372\355\213>\234\341\306=\227\377P>cE\215=7\211\201>r\371_?\362\322]@\037\205\301A\250:\344;\007|~=\021S\242=`\002\267<\236\230u<\265\207\275;\315\314\202A\\\217\334A\315\314\372B\315,PD<N\021>\006\2015?\353\342f?\244p}><\275\222>D\213\354=ffFA\244p\215A\244\360\242Bf\346\351C\365\333\327=\'\302\006>\"\211\236=IK\345<Gr9>\357r\221=\330\3604>H\341\272?V\016\r@H\341vA\n\327#<\224\366\006=H\033G=\2073?<\267(\263<\227\305\304;{\024NA\256G\267AR8\263B3\363\000D\341z\024>\324\232\206>4\021v>\007\360\226=\001\336\202>\035\254\277=\244p\241A\354Q\234A\315\314\005C\000@\234D\325\t\350=>y\030>QkZ>\356\353\000>\240\2110>N\356w=H\277\335>\305 \200?\022\203@@\303\365QB\244\341\024<\255i\336<\006*c=\232w\234<2\311\310<`<\203;q=\260A\\\217\310A\000\000\022C\000\340\270D\372~*>b\241\226>\202\342\007?\344\203^>\010=\233>B`\245=\\\217\226A\217\302\257Aff\367B\000\300\212D\205|\320=\315;\016>\3019#>\276\023\263=\224\366F>\256*{=\212\260Q?\002+\367?\250\306\217@\315\314\317B\317H\004<\311q\'=\273\362Y=\305=\226<\"7\303<\221\362\223;\256G\265A\244p\367A\315L\021C\000`\310D\004V\016><N\261>^K\310>2\346.>Z\365\231>NE\252=\217\302mA\037\205\207A\256\307\275B\315l(Dv\303\266=\"\340\220=Z\r\t=\020\257\353<@\023!>J\230i=\232\010\233>\265\025+?\004V\316?)\\\277A\324\234\274;\225e\210<\310^o<\010\255\007<\250\035~<\001\025\016;\341z\202A\354Q\244A\232\231\314B\000`BDGr\371=R\270\036>#\333\371=\377>\243=\256G\201>$\321\213=\024\256_A\303\365\234Aq=\266B\000\340\025D\207\026\331=\325\t\350=\324\232\346=\274\\\204=\325\347*>h\005\206=e\031b>x\013t?V\016\315?\315\314\226A\020!\256;\376\267\222<\305\376\262<\350\276\034<W`H<\365\203:;\354Q\210Aff\366A\315\314\343B3SYD\324+%>}\256\266>2U\320>\265\025;>\312\303\242>b\020\330=\205\353MA\354Q\234A\nW\245B\232\231\376C\364\032\273=\237q\241=\3225\223<z6\253<\000\221>>\217\374\201=\343\245\273>\330\360D??5&@\000\000\324A\254\250\301;l&_<\347\211\347;\273\016\325;\260\033\266<8\330\033;33gA=\n\303A\256G\276B\232\271\034D\220\240\370=0*)>\001\366\221=\214\276\202=\'\240\251>\255i\236=\327\243`A\024\256\177A\\\217\263B\315\314\030DG8\255=\216uq=\255\300\020=(,\361<{\203/>\003\225q=9E\307>T\343\205?L7)@\303\365\002B\305\255\002<=,T<4\272\203<\2555\024<\346?\244<\205w9;\\\217zA\327\243\254Aff\312B\000\200;Dj\274\364=n4\000>\370\302\344=/\243\230=\037\205\213>\376&\224=\232\231]A\315\314\234A)\\\261Bf&\024D+\331\261=n\243\201=\217\337[<\262\327\273<d;\037>\267]h=\204\r\257>\264\310\326?\033/\025@=\n\355A\353;\277;\241g3<\227r\276;i\247\346;\244\374\244<\316o\030;{\024zA{\024\340A\315\314\311BfF;Df\367\344=C\255\351=\321\256B= Aq=e\252\200>\213\211\215=\354Q`A\\\217zA\024.\263B\000\240\027D\310$\243=\007\231d=\220\367\252<y@\331<\256\266\">u\315d=?W[>\207\247\'?h\221\315?\000\000\232A\262\177\236;\373Z\027<\037\362\026<\266J0<M\333?<C\343\t;\\\217nA\341z\232A\\\017\301B\2329,Da\303\323=\027H\320=n4\200=\201C\250=\365\271Z>\272k\211=\037\205/A\232\231\211A\303u\217B\000\300\271CF\224\266=A\361\343=\353\255\301=\r\375\023=>y\030>\271\374\207=\357\311\203>\305 \260?\201\2253@33\221A7T\014<\364\370==\270\257\203=\246\325\220<\246ax<\267\r\243;\217\302EA\303\365\326A\256G\264B33\356C;p\016>\227\377\320>O\257\364>d;\037>J\014\202>\"7\303=\366(\212A)\\\313A\315\314\340B33hDo\236\252=\212\037\343=F\224\366=R\362j=\2068\026>\201x]=\\\217\002?y\351\326?\254\034R@\037\205iB\234\333\004<\247t0=\240lJ=c\264\216<\232\224\202<\003\nu;=\n\243A\n\327\rB\315\314\004C\000\200\240D\341\013\023>\341\013\323>\356\353\000?\327\0222>\000\000\200>p\261\242=\341z\\A\327\243|Aq\275\260B\232y\022Dy\222\264=\253\225\211=\350\331,<\315\316\"<;\337\017>\271\210o=\364l\266>\031s\367>=\n\017@R\270\352A\207\303\322;\'f=<7\250\375;[^\271;\034\010I<\310\010(;\354QtA\000\000\214A\315\314\303Bf\2460D\254\213\333=?W\333=k\016\020=\326\250\007=\222\\>>\003x\213=\270\036)A\\\217\222A\327\243\205B3s\252C\207\277\246=v\3036==D\243<\270\0066<\217\344r>\335Al=\307):>!\260\"@\274t\243?\205\353QA\360\242/<0\022Z<=D\243<\270\0066<\032\250\214<\2411\223;=\n/A\341z\272A3\263\212Bf&\267C\304\224\310=\354\372\205==D#=\270\006\266<U0\212>\n\364\211=q=\220A\315\314\206A\000\000\353B\000\200wD\014<\267=HP\374=d;\337=\371\024\200=\305 0>\261\277l=\031\342\230>\2201\027?T\343\365?{\024\017B\346\347\206;$\227\177<F\266\363<\014\313\037<=,T<L\245\037;=\n\243A\366(\260A\315L\005C\000\200\241D\312T\001>\314\177\210>\343\245\333>\033/\035>\252\202\221>\260r\250=\n\327?A\270\036\307AR8\233Bf\246\334C\252\361\322=\336\310\274=\005\335^=#\020/=5^:>\272I\214=0L\206>\254\034\232?R\270\356?\270\036\233A\234P\010<T\343\245<\2073\277<\225e\210<]\212\253<~\307p;\024\256OAH\341\362A\303\365\250B\232y\000D\024?\006>\243\222:>\370\302$>k+\366=\235\021\205>\001\373\250=\000\000\216Aq=\340A\232\231\352BffuD\022\275\314=\271\215\006>\r\340->4\327\251=Di/>\302Qr=\302\206\307>#\333\211?;\3377@\315\314/B\346w\232;\235\021\245<\333m\027=\306\3345<\212\253J<\220\202\';q=\254A\366(\032Bff\021C\000\240\263D`v\017>I\235\300>}\320#?^\272I>\231*\230>#\333\271=\315\314lA\256G\215A\217\302\277B3\263(De\374\273=4\021\266=\217\252&=\243#\271<\334\327A>/\027q=\212\260a>\362A\037?-\262\275?\000\000\236A\304\'\235;M\333?<\357\003\220<;\000\342;\316\245\270<\345+\001;\244p\203A\205\353\265A\315\314\323B\000`OD\265\025\373=I\235@>\252\361R>\331%\252=\354Q\270>a2\225=\341zhAR\270\232A\000\200\274B\315\354$DG\311\253=w\276\237=y\222\264=\262\235\357<\320\325\026>-[k=\301\312\201>\337O\255?d;\377?\354Q\270A\217\343\207;\254\305\247<bg\n=4\367\020<\231dd<\225\200\030;ff\202A\270\036\343A33\330B\000\240OD\367\006\337=\371\240\207>\034|\301>1|\304=\310\007}>\235\327\230=\315\314\250A\366(\244A\232\031\nC\000\000\255D\rT\306=\327\243\360=\t\371 >D\213\354=-!\037>\343\337g=\221\017*??5\256?\020X\221@\256\307\243B\205$\263;\347\373\251<%u\002=\1770p<c\227(<\303\201\020;\244p\315A\256G\000B33(C\000\300\374DM\025\014>m\305\236>\223:\341>\325xi>B>h>b\020\230=\205\353=A\354Q\254A\366\250\231B\000\000\330C*o\207=>\350\331=\302\300\263=\014v\303<:#\n>\354i\207=o\022\203>y\351\306?q=\372?\205\353\241A\205\227\340;*Wx=Ou\210=\213q~<\365\326\300<*:\022<\327\243LA\244p\341A\037\005\247B\232\231\375C\353\255\301=_\007\256>\370\302\244>33\263=1\010l>$\321\313=R\270\234A\000\000\310Aff\377B\000\340\224D\206Z\323=x(\312=\325x)>9\234\271=\214J*>\273\320\\=\016O\357>\000\000\260?\276\237:@R\270`B8\370B<\020\006\236<\240\375H=\236\230u<Dn\206<\334\330\354:\037\205\253A\024\256\367A\315\314\013C\000\240\261D\232w\034>\221\355<>V\237\313>O\036\026>\237\315j>\304|y=\000\000@A\n\327\341A=\212\231B\000@\335C.\312\254=\223\030\204=\302\027&=\233U\237<B`%>\024\005z=\357\311C>q=\332?J\014\302?\217\302]A\rR\360;D\027\324<>\355\360<\376,\026<M\363\216<\313\367\214;\244pQA\037\205\027B\327#\252B\315\354\002D\376e\367=\355\r>>Gr9>V\274\221=\243\222z>)\320\247=\341zhA\024\256_AR\270\273B\315\014!D@\023\341=\262F\275=\2505\215=\201\004\205=\303\365(>V\267z=\010\254\234>\036\2478?\351&\t@\232\231\315AU\367\310;\276\366L<\001M\204<K\037:<%\314\264<8\201i;\315\314|A\244p\207A33\316B\232y;D\314\356\t>\342X\027>_\230\014>c\356\332=]m\205>\345\362\237=\205\353IA33\211Aq=\241B3s\366C\244\307\257=\255i^=\207\371\362<K\037\272<\26578>\n\242n=\304B->\272\332*?\027\331\216?\270\036UA\321\315~;)\347\013<u\310M<\273\264\341;4\272\203<)\262\326:\244peA33\261Aq=\267B\000`\036DH\341\372=?W\033>\223:A>\234\277\311=\213l\247>O\036\226={\024VA\217\302\365A\024\256\254B\315L\013DmV\275=\240\025\230=\267\356\346<\205\261\005=\315\314\014>Ujv=V}\256>\242E\366?5^\022@\244p\347A\334e\277;\007%L<\377\005\002<\233\215\025<u\037\200<\375\237C;\315\314pA\244p&BHa\301Bff0D\216\006\360=\252\202\021>\343k\217=z\374\236=\323\336`>\033/\235={\024:A\354Q\352Aq\275\225B\315\214\317C\241\241\277=t\230\257=\005\243\222=\216;\245<\26578>2\217|=\022\203\240>\226C\033@\232\231\t@=\n\271A\010\220!<#\025\306<\240\032/=\203\372\026<\203\300\312<\352u\013;\205\353QAq=\033B{\024\254B3\363\003Dr\371\017>r\371O>X\250\225>\026\373\213=*\251\223>\230\335\223=)\\SA\000\000\312A33\250B\232y\006D(\n\264=a2U=\016\025\343<\032i\251<\035\311%>|\270d=\317fU>\315\314\254?\'1\250?\327\243\214A~\001\275;]j\004<\376ew<\351b\323;F\261\\<\200\231\357:\232\231eA\205\353\010B{\224\266B\2329\036D]\376\003>\320\263\331=\004V\016>\375\366u=\376Cz>\253\004\213=\000\000PA=\n\311AR8\245B\315\014\002D\252e\253=C\312O=N\227E<\321W\220<h\263*>\3500_=\3711\206>-\262\235?\223\030\324?\037\205\251A\242`\306;\257\007\023<\257\'\272;8\236\317;\313\020G<iq\306:\244peA=\n\377A\270\036\266B\000 \035DGr\371=\256\330\337=v\3036=/\206r=h\"l>\365\326\200={\024\034A\232\231\341AR\270vB3s\221C\'\203\243= {==:z|<\227\342*<\213\375%>>\313s=\331_6>\236\357\327?\240\032\237?\341z4A&\340\327;\251\023P<h\221m<\020\004\310;,\361\200<\272\242\024;R\270*A\024\256\023B\\\017\210B3\363\256C\370S\343=\212\037\343=O@\223=\265OG=\237\253m>h\256\223=\327\243\210A33\331Aff\336B\232\271hD\007\266\312=\370S\343=\315;\316=\366\264\203=k\2327>\207\242\200=\177\331m?\274t\223?\313\241\301@ff\346B82\017<\316\307\265<\202\347\336<\364\340n<\302\206\247<{\274\220;\024\256\267A\303\365\tB\232\031\030C\000\000\316D\n\327#>\376Cz>\347\035\207>d;\037>\254\034\232>~\214\271=)\\\333A\366(\322Af\346:C\000P\034E\322\000\336=:\222K>\254\034\272>\037\364,>\341\013S>nQf=\014\002#@\002+\247?33\225A\315\214\007D\332\254\372;y\036\\=f\367\244=\002\324\324<\253\004\213<F[\225;\366(\020B\303\365\372A33{C\000\360\204E\361\364\n>>\350\331>\300\354.?ff\206>\0358\207>\337\032\230=fffA\205\353\327A\000\200\270Bf\206!D\362A\217= \357U=\200`\016=\210K\216<\373\313.>\"\211^=V\016m>gDi?V\016\335?\366(\244Ab\201\257;/\213\211<\336v\241<o\273\320;u\253g<\374\374\367:ffvA\n\327\377A\315\314\310Bf\2467D\027H\320=\006\201\025>\231\273\026>H\334c=\305 p>\372a\204=\232\2319AH\341\222A\217\302\223B\232Y\316Cl>\256= \322o=\216\351\t=d\222\221<\010=\033>\021\374o=Z\3659>]\376C?\264\310\246?q=NA,\327\333;\216X\213<\303d\252<e\251\365;\202\377\255<Ug5;\354QLA\366(\300A)\\\245B\315\214\367C\272k\t>\243#9>\311v>>\375\274\251=\035Z\244>\304\010\241=R\270RA\217\302\221A\\\217\250B3S\006DX\347\230=\245\203u=O\006G=C\034\353<\275\343\024>{Ic=\273\'O>)\\/??5\236?\270\036\207A\232\227\303;\365\234t<u\037\200<e\250\n<\276\0233<\003\'\333:ffnA\270\036\277A33\276Bf\346+D\334F\003>L7I>7\032@>\031\004\326=/\335d>\362\322\215=\n\327SA=\n\241Aq\275\255B\232\271\007D\005\250\251=lx\372=\027\331\316=Q\024\350<A\361#>4\272\203=;\337\217>\211AP?\262\235W@\341z\276As\203\241;\332U\210=\014Y\235=\024\"`<\024\005z<F@\005<=\nwA\000\000\314A\000\000\346B\000`7D\375\366\365=\240\211\020?g\325\'?\361\364\n>\374\251\221>\222\313\377=q=RA\205\353\245A\303\365\253B\2329\006D\374\251\261=\367\006\337=?5\336=\005\305\017=\345\362\037>F\224v=\345a\241>\225\324I?\317\367\023@33\333A\345\n\357;;6\002=\310\007==\222tM<\026\301\177<h\256S;\315\314lA\024\256\313A\315\314\311BfF,D\250W\n>t\265\265>\324\232\346>j\336\361=\3019\203>Mg\247=!\260\032A\315\314\220Aq=tBf&\217C\2235\252=\265T^=\302Qr<\341\t\275;1\010,>YQ\203=2\346\256>\236\357\247?\232\231\021@\n\327\247Au\3453<g\362M<F\353(<\311\350\200;N\234\334<T;C;ff2A\303\365\304AR8\216B\232\031\276C\226!\016>\022\203\000>\236A\203=\315\314\314<\266\204\234>\256G\241=\315\314\214A\327\243\272A\000\000\356B\000 uD\035=\276=\2505M>\365\271Z>\2505\315=\237\253->\310\352\226=d\314m?\037\205\273?\313\241\271@\315\314\321BR\265\335;;\337\217=\322\373\206=/Q\275<Z\r\211<\243#9<\\\217\254A\303\365\346A\232\231\017C\000\240\263D\2201\367=\364\375\364>X9\004?\361cL>V\237k>\332\254\372=\205\3539A\244p\221A\217\302\230Bff\314C\327\243\360=\365\333\027>`\345\320=\305\346c=\225eH>\030\225\224=\241\370\321>R\270\336?^\272A@\315\314\336A\345\no<YQ\003=\3333K=\221\320\226<\211\007\224<^\363\252;\217\302UA33\313A\256G\260Bf\006\004D\242E6>\206Z\223>\212\037\243>\227\377\020>\'1\210>\177\331\275=\010\254\032A\205\353\223A\303\365uB\315\214\220C\3166\267=\361)\200=\n\200\361<\303\rx<\324+e>\227V\203=\312T\301>\315\314\254?\177j$@\n\327\265A\363\312\365;Z\360\242<\265T\336<N\354!<.\220\240<\2408\200;q=2A\303\365\314A\217\302\215B\232\231\300C$\271\374=\233\346\035>\312\303\002>KY\206=A\202\242>O\222\256=\327\243@A\270\036\341A3\263\231B3\363\340C\260=\263=\217\302u=\226\347\301<N\271\302<\177\331=>\334ci=_)\033?\351&)@\002+\203@\n\3273B+Q\366;m\305~<\216\006p<\236\322A<\264\260\247<\356y~;\232\231YA\354Q\005B\341z\256Bf\346\rDa2\325=@0\307=WCb=\2034c=k+v>{\367\207=R\270nAH\341nAf\346\300B\232\271+D\330\330\245=b\025\257=\240\340b=\242\356\003=\261\277,>\3063h=lxz>\233\346\335>^\272\351?\341z\272AF^V;\227\377\220<6<\275<\366\233\t<\234\026<<\377\350\033;\244p\211A\217\302\221A\000\000\340Bf\246bD\254\034\332=2\346\216>\312T\241>\325\347\352=\'\240\211>Yn\251=\354QDA\217\302\357A\n\327\232B3\263\350C\357\254\235=\235.\013=\000\000\000\000\000\000\000\000\262..>!\037t=\223\030\344>shi@u\2238@\037\205\014B\376{\360;\246\r\007<\000\000\000\000\000\000\000\000\306\247\000=Y\205M;33WA33\030B\366(\252B\232\271\013Dj\366\300=D\206U=\000\000\000\000\000\000\000\000}\256v>\275\030\212={\024.A\205\353yA\354\321\214B3s\263C\315;\316=c\356\332=\252\202Q=B\262\200<\000\221>>\222\005\214=\276\301\027>^\272\t?+\207\246?P\215\031A\242\232\222;\351`\375<{\332\341<-@\333;\367\222F<\224\027\231;=\n?A\315\314\232A\\\217\241B\315\214\330C\225e\010>\336\223\307>\272I\254>\310$\243=\257%\204>\033/\335=\256GMA\024\256{A\256\307\245B3s\375C\243#\271=`Y\251=i\000o=W&\374<\215\227.>M2r=c\177\031>\232\231\371>\303\365\230?q=:A\260\255\237;\332 \223<\300\347\007=b\370\010<g\'\203<\014\003\026;\244paA\315\314\232A\244p\272B3s\027DK\310\007>\313\241\205>\241\370\261>\030[\310=>\350\231>\363\310\237=33cAq=\244A\354\321\270B\232\231\032D)\350\266=\034\353\342=gaO=\350\202\372<\3436\032>\357 v=\327\022\262>\323M\202?\236\357/@{\024\370A\003\224\206;.\255\006=\250\030\347<\033/]<&\344\203<\256\3243;\232\231\203A{\024\332A33\340B\000 ODh\"\354=\227\220\257>I\235\200>\025\035\t>\245\275\201>\215\356\240=ff^A\303\365\204A\244\360\261B\232\331\025Db\326\213=\302\335Y=\2510\266<\273a[<\265\2469>+\301b=d;\037>\330\201\023?\016-\262?\341z`A\010\313X;\031sW<cD\"<\301U\236;\n\235W<DL\t;q=rAff\256Aff\312B\232\2713D0/\300=\026jM>\273\270\r>f\332~=0*\211>\261\247\235=\n\3277A\244piA\341\372\223B3s\312C\2068\326=k\202\250=jjY=\354L\241<k+6>\261\242\206=\027HP>}?\225?u\223\310?\244peATn\242;\313-\255<\322:*=\321\261\003<\203\372\226<\334\330l;ffFA33\257A{\024\244B\315\314\351C\336q\n>\362\322M>K\352\204>\327/\230=F\224\226>\243\001\274=\000\000\202A{\024\234A\232\231\333B3\363KD\363\037\322=\334\327A>f\367d>\nK\274=-C\\>\252\267\206=\\ \241>\326V|?\341zD@\341z\004B\004\257\026<\033\r`=:u\245=\353s\265<\006*\343<\233=\320;\270\036\213Aff\270A33\364B\315\354jD;\001\r>Tt\344>\224\366\026?\217\3025>\261\341\251>\364\032\273=\\\217BAq=\220A{\224\234Bf\246\343C\r\032\272=\262\205\240=\364\340\356<\006/z<\342\351\025>B\262\200=e\252`>\354Q\230?\264\310\326?{\024\202At\354\240;\215z\210<m\342d<\233\035\251;.9n<\"\210\363:\244pUA\303\365\336A\366\250\261B\232\331\010D\376e\367=\236^i>T\343%>\371\017i=\331_v>8J\236=ff^A\205\353\231A\303u\261B\232\271\026D\333\247\243=(\'Z=\264Y\365<\014\223\251<\212\260!>W!e=z\307\251>\215(m?\201\225\003@\256G\343A\317\276r;_F1<\332\254z<\204\236\315;\202\377-<\026K\021;\256G\203A)\\\323A\315\314\320B\000\240OD>\350\331=`\345\020>\261P+>y\351\246= Aq>\236\265\233=\037\205WA\303\365`A\327\243\256B3\223\010D?W\333=D\213\354=\233\376l=\003\262W=k+6>{\367\207=x\234\">\312\303\022?V\016\215?\244pMAN\321\221;K\345m<\004\220Z< \010\020<\244\031\213<\032\2466;\256GmA\\\217\222AH\341\275B\315\014%D\251\244\016>\311\345\177>6<=>9\264\010>\3578\245>\031\377\276=33[A\270\036\215A\037\205\257Bf\306\016D\250\306\313=\231\365\242==I:=\000o\001=W[1>O]y=5\357x>*:r?\'1\310?\270\036\245A\021\252T;\223\036\006<\244\031\213<\002F\027<\316\210R<\364\300\307:)\\oAq=\274A\\\217\277B\000\240+D\"\216\365=\225\324\t>|a2>\237\345\271=\356\353\200>r\212\216=\024\256{A\341z4A\232\231\315B\315\314:D=\233\325=\201\004\005>\263\352\363=\016g~=}\2566>0/\200=y\351&>\3711\306>\323M\222?\205\353]A\334\270\305;+\030\225<\177\244\010=9\321.<\022\203@<f\331\023;{\024\210A33cA\000\000\341B3\223UDd\314\035>Y\206\230>;\001\315>O\257\024>\034\353\202>\000\214\247=33GA\256G\203A3\263\245B\232Y\356C\303\330\302=\365\271\032>\t\033\036>\376}F=a2U>\031\004\226=U\301\310>\372~\232?\305 \240@\037\205\361A1\013\355;\216\001\231=\257%\344=\202\347\336<\372a\004=\221\272\035<\341z\\Aq=\250A\327\243\303Bf&\021D\327\243\360=W\354\317>\332\254\372>\272k\t>]m\245>a\303\323=q=jA\315\314\206A\205k\274B\000\200&D\272\367\260=\317,\211=\021\252T=\203\243\344<\027H\020>?W[=\212\260a>\234\304\200?\272I\274?\n\327\237Au\253g;\250:d<\274t\223<\234S\311;\222tM<\332\306\237:\024\256\203A\037\205\313A\000\000\324B\000\300OD\261\341\351=\317\367S>~\214y>DQ\240=Zd{>\t\026\207=\037\205\233A\\\217\226A\232\031\000C\000\340\221D\367\006\337=tF\024>\260\003g>\375\207\364=\332\254:>lxz=\323\336\020?X9\264?Nbh@\341z\207B\366F\255;Q\024\350<eS.=\004\255@<\032\250\214<\244oR;\024\256\277A\270\036\363Af\346\031C\000\200\331D\232\010\033>R\270\276>+\366\027?\252\361R>\0358\247>\033\201\270=H\341:A)\\\201A\341\372\226B\000@\322C\260\003\347=\314\264\275=\221D/=fI\000=H\277=>\255\027\203=\t\033\276>F\266\223?\274t#@\\\217\334AYl\023<h\256S<I\242\227<\2073?<\266J\260<2\221R;\270\036UAR\270\254A\327#\255B3s\tD-C\034>\253>\027>u\223\030>\336\002\311=\227\220\217>\336T\244=\037\205\205A\232\231\241A33\326BffVD\337\211\231=]\247\221=\212v\025=L\375\274<\310\007=>\254\034Z=6<}>\345a\021?33\343?\232\231\267A\326\310.;\243\351l<\362$i<u\222\255;\'\245\240<\211\322\336:\244p\231A\341z\324A\232\231\376B\000\200\207D\251\244\316=\006\201\225>\022\245}>\013\357\262=`v\357>y\036\234=\000\000DA\037\205\263A)\\\234B\000@\351C\254\305\247=\364\375T=/i\214<,\232N<\t\033\036>\347\306t=\013Fe>\301\312\221?#\333\311?\354Q\220AY\374\246;]mE<g,\032<\216 \225;4\272\203<\2138\035;R\270bA\205\353\377A\341z\271B\232\271\033DI\235\000>\307\2728>m\347\373=\245\275\201=R\270\236>X\377\247=\315\314\216A\024\256SA33\345Bf\006xD\262\205\240=\370\245~=4\0216=\201!+=#\333\371=\327\300V=4\200\367>T\343\205?\230nJ@\315\314KB\324)\217;\254\217\007<S\350<<\024\262\363;\327QU<\300\222\253:\\\217\236A)\\\223A33\376B\000@\227DH\371\311=\371N\314=b\241\326=\335\322\252=F\2246>\346yp={\024\220A\341z\244A\315\314\354B\000\300{D;\001\315=]\376\003>\262\235\357=<\367\236=\254\255X>\367\351x=\223:A?/\335\244?\307K\253@\341z\263B\331\005\003<\033/\335<I\021\031=\021\001\207<~R\355<\341\360\202;q=\254A\341z\320Aff\017C\000@\262D\246\n\006>\351Hn>\270@\202>>y\030>\202s\246>\366(\234=)\\GA\256GMA\366\250\235Bf\246\356C\203\372\226=\355\231%=|\013\353;\216@<<\324+%>\340Jv=0\273\247>?5\276?y\351\006@\315\314\304A\322:*<\336T$<O=\322;\010Z\001<J\007\353<{\371\235;=\nSAH\341\202A\341z\246B\000\200\005D\213O\301=\"\246\204=S\"\211<\254\213\333<\325xi>\366\356\217=\\\217RA\354Q\244A\270\036\250B\315\254\006D\2068\226=b\020X=\274t\223<u\310M<Di/>(,q=\002\274\245>D\213\274?/\335\024@\\\217\320A\353\247\377;\217\031\250<\236\265[<7R\266;\227\342\252<C\0031;\000\000hA\024\256\343A{\224\276B3\023\"Df\367\344=\347\214(>\261\247\235=\303\323+=\014\223\211>[%\230=\205\353mA\024\256\241Aq=\300B\2329*D~W\304=\325\347\252=j\301\213=\377\312J=\320D\030>&pk=\r\340m>sh\321?\272I\314?R\270\256APp\261;\350\237`<\257_\260<\236\322A<5{\240<\241\200\355:{\024\200A\n\327\343A\315\314\317Bf\346CDl\t\371=\226!\016>{\024.>\027H\320=\352\225r>\304%\207=ffJA)\\\221AHa\245B\315\314\362Cd]\334=\002\232\010>+0\244=\277\324O=\325\t(>\263^\214=D\372m>e\031\"?\207\026\331?33\223A\237\350\272;\276\366\314<\355\360\327<8\025)<\347\030\220<8\201i;{\024fA33\261A{\224\276B\315l\036D\255\372\034>\335\265\304>\376e\267>\251\023\020>B`\245>\363\216\323=\037\205GA\341z\212Af\346\240B\315\014\360Co\330\266=-C\234=\034\323\023=\210\021\302<-C\034>\350\244w=v\340\034>\236\357G?Nb\240?\\\217>AP\306x;\350\237`<U\207\\<\220\205\350;\202\250{<a\373\311:\303\365`AR\270\302A\327\243\271B3\323\027D\223\251\002>\245N\200>\316\252O>\207\247\327=Zd\233>\264\345\234=\205\353\223A\366(\214A\232\231\362B\000\200\205D\362A\317=]\334\006>\254\255\030>^\021\274=\310\230;>\221\'\211=,\324J?\217\302\205?d;\233@=\212\277Ba\245\002<<\245\003=X\2505=3\334\200<\363v\204<#2\254;\000\000\266A=\n\267Aff\022C\000\000\310D\274\226\020>$(\236>\275\343\264>\214J*>\022\203\200>\000o\301=R\270\244A\205\353\251A\315\314\tC\000\000\245D?5\336=yX(>\033\r`>\257\224\345=6<=>f\332~=t$\027?\343\245\233?\215\227\206@\024.\226Bvn\332;\203\243\344<(a&=\302Qr<`\0027<\257@t;H\341\276A{\024\366A33#C\000\000\334D\342\351\025>\231*\270>\030\225\004?\007_X>\266\363}>\255L\270=\327\243pA\205\353\205A\303u\305B\232Y,Dbg\312=q\254\013>G \236=\212\223{=\237\315*>X\255\214=\311v\276>\371\240W?\274t\023@)\\\013B;\032\207;2\003\225<\'\203\243<\320~$<\350\331,<\331#T;{\024\206A\244p\243Aff\333B\2329VD\260r\350=\211\322^>\355\r>>\205|\320=\300\354^>b\025\257=\270\036]A\205\353\303A\366\250\270B\232\371\024DD\372\355=h\",>\361\364\n>\240l\212=\303\365h>\2716\224=O@\363>\201\225\303?\004V>@33\034B\335\230\036<\027\361\035=\200`\016=\372a\204<\256d\307<P6\345;{\024\200A\217\302\003B\000\000\324B\000\000ED\242\2647>(\017\313>q\033\255>\032\300\033>c\356\272>EG\362=\327\243HA\\\217\202A\000\200\242Bf&\356C\215(\355=?5\336=\226\317r=\317N\006=\224\366F>\354i\207=A\361\203>\366(\214?\260r\310?\205\353\223A#\365\036<_^\200<\252\361\322<\3377><:u\345<\177\207\";\270\036YA33\253A\nW\255B\000\000\nD\301\312!>jM3>\000oA>\335A\254=7\211\241>\324`\232=R\270\270A\327\243\236A\232\031\030C\000@\322D\374R\277=\\\217\002>V\237+>\026j\315=\254\034\032>\350\237`=}?\245?m\305>?\366(\032A334C\251\203\274;6v\t=b\333\"=\231\236\260<QN\264<\230\333=;\354Q\366A\303\365\276A\000\200SC\000\340-E\"\216\365=\232\231\271>\270@\302>g\325g>\275\343\224>p\010\225=\272I\024A\205\353MA\303\365uB3\263xCTR\'>\013Fe>9E\307=6\037W=\330\201s>\331\231\302=\362\260\320>m\347\213?`\345@@\354Q\240A\340H <R\n:=\347\251\016=\260=\263<\233=\320<z6+<\341z$A=\n\203A\232\031\212B\232\031\226C\312\303B>\340-\260>\007\360V>\205\353\321=\254\213\233>n4\000>\345\320\032Aq=RAq=\200B\000@\210C\022\203\000>\212\260a>jM\363=d#\220=\005\243R>\223\030\304=(~\214>\205\353\261?j\274\344?)\\\215A\000W\262<e6H=\234\212T=h\221m<\n\235\327<\234\026<<\232\231)A\354Q\220A\244\360\212B\315\014\244C\026jM>\254\213\273>F%\225>\366(\334=N\321\221>q\254\013>\037\205CA\354Q\240A\244\360\236B\315\214\342C\367u\340=\372\355\353=\213l\247=Pp\261<c\177Y>j0\215=Gr9>\032\300K?\326V|?\256GIAY\205\315;g\017\264<\206r\"=r\032\"<\320DX<\206\343y;\\\217RA)\\\301A\217B\252B3\323\000D\227\220\017>V\016m>\364\375\264>j\244\245=h\263\212>\321\005\265=\303\3650A\303\365\210A\000\200\216B\000@\267C\375\207\364=?W\333=\245k&=9\321.=\360\026H>6Y\243=k+6>\n\327\203?9\264\250?\315\314DA\036\304N<!Y\300<\274t\223<\316\210R<\306\334\265<@3\010<=\n;A\205\353\245A\366(\230B\315\214\315CU0*>r\371O>I\235\000>\303\330\302=\004V\216>\3274\357=ff\202A33{Aff\321B3\363LD\241\020\301=6v\211=OXb=\206\346:=\3274/>\362\265g=*\251S>|\362\360>!\260\222?)\\\245A^I\362;z\031E<\250W\312<~tj<r3\\<\253\\(;\\\217\212A{\024\216A\232\231\333B\315\014hDL\246\n>\314]\013>p_G>\361\364\n>\037\205k>\006\022\224=)\\wA\232\231\277A\232\231\317B3\3236DEG\362=\356|?>;\337O>V}\256=l\t9>R\017\221=\025\214\252>\014\002\373?\317\367;@{\024\002BFE\034<\250WJ=\312\211v=\3372\247<\rq\254<\246\233\304;H\341\210A\354Q\021Bff\353B\232YcDW[1>vO\376>TR\027?\277}]>\376C\232>\210\205\332=\n\327;A=\nkA\270\236\230B\000\000\325C\026\336\245=w\333\305=\234\277\211=\327/\330<c\177\031>bg\212=\201\004E>tF$?\366(\254?\327\243PAC\311\344;<f =L\211$=\367Xz<\243#\271<\025\213\337;33GA\315\314\214A\000\200\242Bf\346\354C\032\300\333=i\000\217>^\272\211>\320D\330=&S\205>iR\312=\303\365lA33kA\354Q\275B\315,*D\256\201\255=\222tM=[\353\013=\242(\320<\261\341)>\330\r[=\322o_>\t\212\037?\360\247\326?\217\302\245A\310\316\333;\322\035D<\226\317r<\332\003-<\000o\201<V-\351:\217\302yA\327\243\214Aff\313B\315\014>DgD\351=\204\r\317=\034|\341=\034\353\242=i\000o>\212\223{=ffVA\366(\244A\256G\261B\315,\013DA\202\342=\364l\026>\317\367\023>\321\\\247=\254\255X>\031\004\226=\271\374\307>\315;n?\266\363E@\024\256\006B\354g\261;~\214\271<\330d\r=\004\220Z<q\254\213<`<\203;\256G\203A\256G\355A\232\231\342B\232\031SDw-!>]m\305>\256\266\002?\274\005R>P\215\267>\212\037\343=\256GiA\\\217ZA{\224\274B3\263$D\377[\311=\001\244\266=\366b\250=\222\"2=\327\0222>\260\003g=}?\325>\316\252\037?m\347#@\244p\024B\307L\242;ep\224<\220\240\370<W\260\r<W&|<\324|\025;{\024\206A\205\353\211A\000\000\331B\000\200WDlx\372=]mE>I.\177>\030!\274=\202s\206>\321W\220=\315\314pA\\\217\230A\037\205\302B\232y/D$\271\274=\n\021\260=3P\231=\305\2171=\256\330\037>EGr=\313\241\305>\020X\231?\354Q(@\303\365\031BcD\242;\224\207\205<\200\016\363<\355b\032<b\276<<\204.\341:\327\243\214A\341z\340A\232\231\343B\000\300qDI.\377=t$W><\275\222>B`\345=C\255i>\375j\216=\244p5AH\341\224A\037\205\221B\232\231\303C\320\325\326==\017\256=\27550=\037\200\324<&SE>\016g~=\376\324x>\256G\201?\027\331\276?\037\205\221A\214\206\014<Dn\206<8\363\253<\362^5<\256d\307<\276\203\237:\037\205GAq=\270A\315L\236B\315L\357C\365\333\027>w-!>0L&>\256\360\256=\010\254\234>t\352\212=\341z\222A\327\243\244A\232\231\361B\000\200\203D\365\271\332=$\227\377=e\252 >u\216\301=\311v>>\346Ws=\221~\013?\366(l?\266\363M@R\270\206B\013`\312;\213\303\231<\n\242\356<k`+<3m\177<\352\2252;H\341\256A\232\231\321A33\016C\000\240\272D\343\307\030>\334\327\201>\367u\300>\276\237\032>\210c\235>\304\010\241=\270\036\237A{\024\242A\000\200\002C\000\300\227D\252`\324=\335$\006>\205|\020>\232%\301=Y\2068>\342u}=\274\005\002?\316\252_?#\333i@\315\314nB\240\301\246;i\251\274<\024\005\372<\347\000A<\313--<\212;^;\n\327\275A\n\327\311A\000\200 C\000\300\315D\316\031\021>\272k\251>\242E\326>\324+%>A\202\202>\364\032\273={\024NA\217\302\221Af\346\250B\315\214\366CGr\371=\036\026*>\313\241E=\3745Y=i\000/>\234\212\224=x\234\342>\313\241\225?\226CK@\341z\tB!\311\254;\254\312\276<\3711f<$\321K<H\304\224<\t4X;\315\314pA\303\365\302A\270\236\306B\315\254(D+\030\025>k\232\227>I.\377=\367u\340=\3122\204>\357 \266=\000\000LA\232\231\205A\037\005\245Bf\346\366Cff\346=\370\302\344=\300\354\036=\264Y\365<\207\026Y>\230\243\207=\001M\304>Nb\200?\024\256\037@\303\365\344A\017\016\366;\026\301\177<\262\364\241<g\267\026<\230\335\223<\204\324m;33gA\205\353\255A\217B\273Bf\006\034D=\n\027>L\246J>\027\267\021>\370\302\244=6<\235>S?\257=R\270\024Aff^A\n\327oBf\346\200C\361c\014>H\341\372=\215z\010=\rT\306<\t\371`>4\235\235=F%\265>\327\243\220?\376\324\030@=\n\235A\361K}<\251\023\320<n\372\263<\000o\201<\225\267#=\353\247\177;\270\036)AR\270\216A\024\256\207B\315L\243C\244p=>\231\273V>\324\267\314=\313\271\224=\232w\274>\214\363\267==\n\305A\315\314\254A\000\200%C\000 \346D\252\361\322=\207\247W>D\213l>b\241\026>\337\340K>\305\003\212=\362\322}?\235\200f?\232\231\341@f\346\013C\304z\243;C\220\003=\246D\022=\204\323\202<|\355\231<\306\371\233;)\\\357A\244p\327A3\263MC\000 %E\272k\t>\364l\326>V}\356>\244p}>n\243\241>\344\017\306=\366(4A\327\243\236A\232\231\216B\315\014\302C\'N\256=\251\3014=\024\t\246;\023\231\271;\371\240\'>\226\347\201=\'\240\t>\276\237\212?\354/{?\337O\025A\'\240\211;\312T\301;,\r|;\2613\205;M\241s<\266g\026;H\341>A\244p\323A\217\302\230B3\363\331C\034\353\342=\303*\236=\334\200\317<X\377\347<\034\353\202>\014\352\233=)\\[A\244p\225A\303u\261B\000\300\016Df\024\313=\321\"\333=\321\221\\=\241\363\032={\203/>\007%\214=\023a\243>;\337\237?\016-\022@\232\231\323A\324\322\334;\344f\270<\227\342\252<\375\202]<\2760\231<:\220u;\217\302qA=\n\315A)\334\306B\232y/D\205\353\021>\023a\203>\335$F>J{\003>j\336\221>s\364\270=P\215\035AH\341zA\000\000|B\232\231\222Cke\302=\317k\254=\244\337\276<1\353\305<_\007\016>\260 \215=\222\313\177>\343\245\233?\221\355\374?\n\327sA\252\020\017<\330G\247<\202\377-<\354\332\336;\rl\225<\230\373d;\n\3273A\205\353\267A\327\243\224B\000@\274C<N\021>\346\256e>s\272\254=\205\261\205=7\032\200>\257\231\274=\321\"\tA\232\231QA\270\036ZB\315L]C=,\324=\251M\234=\363\037\322<\376ew<\303\323+>\303\360\221=\245\275\001>\233\346-?\376\324\210?\305 \350@kb\001<\321W\220<\265\211\223<\234\334\357;\251j\202<I\235\200;h\221\027A\232\231\223A33}B\315\314\211C\325\t(>/\335d>\017\2343>eS\256=\307\272\230>\320\325\326=)\\WA\000\000\226AH\341\256Bf\306\tD\366(\334=\371\017\351=\256\022,=\036\033\001=io0>F_\201=_\230L>?W\033?9\264\270?\\\217\200A\355\232\220;\317kl<\014<w<\247w\361;\340\326]<\3059\352:\232\231uA\256G\311A\315\314\313B3\3633D0L&>\345\362\237>\202\342\207>\363\037\022>!\037\264>\216u\261=\244pEA\354QDAH\341\235B\000@\352C\246a\270=\330*\201=\302Q\362<\235\327\330<\037\364,>K\345m=\373\313\356=d\314\375>xzE?\256G\017A\357<q;\2239\026<\252\020\017<\234\026\274;\261\3718<[\013\263:\217\302YA\366(\232A\244p\256B\2329\rD\001M\004>\252`T>\376e7>\321\"\333=d;\237>\362{\233==\n_AR\270RA\270\236\264B\315\214\024D$\227\377=K\310\307=\027\331\316=\247y\207=\250WJ>G=\204=6\315\013?\327\243(@y\351\202@\303\3652B\320~$<C\377\004=\255\027C=\277\267\351<(~\214<:$\265;\205\353iA{\024vA=\n\275B3S#D\340\276\016>q\254\013>@\244\037>;\337\317=\033/]>\234\212\224=\270\036AA=\nWA\366\250\233B\232\231\336C\256G\341=\033\201\270=\251\336\032=P6\345<C\255)>\363T\207=e\252\200>%\006\001?Zd\333?\354Q\224AU\027\360;S\350<<\313J\223<\266\327\002<\037\272\240<Mh\022;33WA\354Q|A\n\327\255B\232y\tD\032\300\033>\347\035\'>\302\027&>\235h\227= c\216>\253\347\244=\000\000<A\341z\214A\256\307\227B3s\323C\032\300\333=\030\354\306=\311YX=\306\3345=\234\242#>\266\276\210=\367u\340>\223\030\364?7\211I@\256G\365A\303\327\327;O\257\224<\210K\216<\n\235W<\275R\226<\226\351\027;\000\000XA\n\327\337A=\n\261B3\023\nD:#\n>\177\331=>\337\340\013>\027\331\316=H\277}>\005\335\236=R\270:A\366(\240A\205k\226B\232\031\320C\251\023\320=\362\230\301=1\010,=\222\263\260<\222\\>>?R\204=*\251S>;\337_?\323M\262?\244puA\225\020\254;\321y\215<\231\273\226<\330\232\255;wgm<\362\013/;\232\231UA\341z\346A\000\000\256Bf\246\tDR\270\036>\276\301\227>\2505\215>0L\246=\257%\244>\307K\267=H\341ZA\327\243\202A\037\205\257B\000\340\017D3\376\275=\030\225\224=\032\206\217<u\002\232<\260\003\'>\332\033|=\340\234Q>\253\317\365>w\276\257?\000\000\212A/\337z;\334\330\354;\221\356\347;\366\\\246;\367\257,<\337m\336:\232\231}A\232\231\241A33\313B\232YAD\000o\001>R\' >\"\375\366=\007B\262=\316\252\217>\030`\237=\217\302\243A)\\\245A3\263\006C\000`\242D\317\203\273=\202s\006>\210\364\033>;\337\317=d\314]>U\366]=\317fU??5\336?B`\245@\315\314\310B\362\316\241;\006\r\375<7\246\'=\235.\213<\315\257\346<@12;\n\327\271A33\331A\000\000\030C\000\240\315De\252\340=\245\275\201>vO\236>\324+%>/\335\244>\010\311\202=)\\/A\303\365\214A{\224\215B\315\314\266C\307c\306=\221\270\307=\216\222W=\231d\344<\035\311%>`<\203=\032Q\032>\276\237\312?\270\036\225?\244p!A\025\252\033<\346\\\n=\324C4=U\207\\<\263\230X<\256\232g;\205\3539A{\024\324A)\334\230B\000\300\313C*:\022>\022\203\200>,eY>\n\364\311=\303dj>\220\210\251=ff\244AH\341\246A\315\314\tC\000\200\243D\2068\326=\327\0222>\006\201U>p_\007>\007\316Y>>\005\200=s\3272?2w}?\215\227\226@\\\217\257B\014\003\226;\177M\326<x\013$=\017\321h<\205\224\237<\35790;ff\302A\n\327\313A33 C\000 \342D\334\327\001>\022\203\240>8\370\342>\210\364[>\333\212\235>\\\003\233=\354QdAff\264A=\212\273B3s\035D\030\225\324=\326V\354=\253\317\025>\025t{=\3578E>\321\005u=\227\220O>\221\355\354?\\\217\362?\354Q\224A\220O\310;p\231\323<[B>=R\017Q<Z\273m<9\'v;\327\243tA{\024\tB\232\231\320B3\0236D\337O\r>\372\355\213>\343\307\330>\003x\013>:#\212>J\007\253==\n;A\037\205\303Aq\275\230B33\313C\377!\375=\300\354\036>5\3578=\373\2269=\3436Z>\207\247\227=\376e\227>\033/\375?\254\034\n@\232\231\247A\243\006S<\273\'\017=\343\307\230<\264\253\220<$\227\177<A\327\276;\024\256OA\217\302\000Bq=\254B\232\331\363C\017\0135>\202s\246>\027\331\016>o\360\005>{\203\217>\203/\314=\370S\367@\205\353\313A\205\353?B\315\3142C\330\330\245=\212\315G=\000\000\000\000\000\000\000\000\356|?>a2\225=\345a\301>\321\"\273?\356|\037@\270\036\231A\343kO<2\313\036<\000\000\000\000\000\000\000\000\354\027\354<\204.\341;d;\021A)\\\367A\024\256dB\000\000xCI\235\000>\237\315\252=\000\000\000\000\000\000\000\000\321\221\234>\276\207\313=\254\034\366@\037\205\313A)\\ABff*CI\205\261=\"\216\365= {\275=Nz_<\274\226P>\220\275\236=\323\336`>\337O\275?\303\365\270?\024\256;A\342u}<G=\204= {\275=Nz_<\rq\254<an\367;\027\331\nA\270\036\377A\303\365YB\232\231_C/n#>v\340\234>\273\270\255>\315\314L=\027\331\216>\032Q\332=\327\2438A=\ngA\315L\225B3s\311C\352x\314=B`\345=H\371\211=\037\200\324<\307):>6\345\212=r\212\216>\323M\342?Nb\320?H\341\246A\313\020G<rm(=msc=\347\306t<\231\273\226<\002\236\264;\366(DA\244p\235A\\\217\235Bf\346\344C^\272\t>\031\342X>G\0038>>\256\215=V}n>\226\225\246=\037\205gA\205\353\307A\270\236\277B\232\031$DU\373\264=m\347\373=\251\244\316=\233U\037=[\261?>\032\335\201=\201&\202>\254\034\212?)\\\'@H\341\270A\342\345\351;>\226>=\372\325\034=\320a><\032i\251<\311>\310;\217\302\201A\n\327\375A\000\000\343B\2329JDL7\t>t$\327>\027\331\316>\264\310\366=\245,\243>\252\202\321=\n\327kA)\\\313Aff\275Bf&\'D\325x\251=#\276\223=\013$(=\313\370\367<\177j<>\036\247h=\354/\233>\256G\261?\370S\013@\256G\333A\232w\234;>\005@<\215\177\237<\270\351O<\2760\231<\370\030,;{\024\204A\366(\001B\315\314\326B\232\231ND\207\026\331=\004\347\014>f\367$>\211A\340=\314]\213>yu\216=)\\SA\341z\340A\217\302\251B\232\231\006D\003\225\261=I\327\214=\356\261\364<\335$\006=\013\265&>.\312l=\016\276p>\177j\314?\364\375\304?\315\314\216A\214\364\242;\332\311`<\255nu<x_\025<\347:\215<\232\007\260:\205\353eA\024\256\024B\303\365\270Bff\035D\254\213\333=\026j\r>c\177\331=\327\372\242=6<}>\340\363\203=\205\353]A\232\231\245A=\212\263B33\022DN(\304=\205|\320=|\017\027=\210\021\302<T\343%>b\370\210=\226C\213>\031\004\206?/\335\004@\303\365\270At_\316;$\356\261<\2068\326<\227t\024<!\037t<3\335k;\315\314pA\000\000\306A\nW\306Bf&,D\000o\001>\274\226P>;\001\r>\203/\214=0Lf>\211\352\255=\205\353YA\n\327\271AHa\256B\315L\017D\253[\275=\266-\212=M\241\363<l!\310<\303d*>\345\233m=\351&\261>\014\002\253?X9\004@\205\353\371AZH\300;8\363\253<q\217\245<,\201\024<\220\367\252<\215G);\232\231uAR\270\350A\366(\303B3s6Dl\t\371=?W\033>\320\325\326=l\354\222=9E\207>\277e\216=\270\036%A\315\314\202A\270\236\202B3s\242CT5\301=\343\215L=[\316%<g\017\264;%\006A>3\376}=\031sW>P\215w?h\221\255?\037\205OA\2551\350;>x\355;[\316%<g\017\264;$\227\177<m\311*;\000\0004A\366(\256Aq=\216B3s\300C\201\225\003>\214\025\265=\222\2213=0\r\303<gD\211>\022\210\227=\366($A\327\243\204A3\263\203Bff\240C\014\315\265=\0221\245=\361\2002=\221\270\307<\325\347*>\262\200\211=\214J\352=\252\361\202?q\033}?\230n\352@\201C(<+\244\374<\225\016\326<\204\2733<\'\210\272<\347\000\301;\256G-A\354Q\260A\366(\216B3\263\262C=\233\025>\213\375e>F\2246>\353\250\252=z\307\211>B!\302=\221\355\032AR\270\232A33tB\232\331\216CK\345\255=_\007N=qr\277<<\210\035<\301\312!>\267b\177=\376e\227>\311v\256?\274t\003@\205\353\221A>\313\363;\t\3767<qr\277<<\210\035<Bx\264<G\036\210;H\341.AR\270\314A33\212B\232\031\266C\"\216\365=\210\200\303=\356|\277=<\210\035=\223\251\202>\2343\242=\270\036-A\024\256\301A\256\307\211B\315\314\264C\254\305\247=~5\207=\323\237}<\205\261\005<\250WJ>\362\230\201=\201\004\005?\006\201\365?\223\030d@\000\000\004B\211a\007<\2760\231<C9Q<e\343\301;\305\003\312<\306\031C;\341zPA\232\231\373A\315\314\247B\315\314\374CF\224\366=\0358\'>\314\264}=\205\261\005=\355\236\234>4.\234=\217\302-A\n\327\253A\037\005\211B\000@\264C\327/\230=O#-=\000\000\000\000\000\000\000\000\036\026*>M\241s=\023\362\241>y\351\246?)\\\007@)\\\245A=\361\034<\036\3414<\000\000\000\000\000\000\000\000r\026\366<\243\003\022;\\\217:A\366(\306A\366(\224Bf&\316C;\001\315=\257|\226=\000\000\000\000\000\000\000\000\377\262{>\021\001\207={\0242A\037\205\263A\341\372\216B33\275Cd\351\303=)\320\247=N\227E=\270\344\270<;\337O>Z/\206=)\\\217>\250\306\273?d;\377?\315\314\216A_\014e;\034\360\371<q\033\r=\254\305\'<\021\215\356<e\303\232;\354Q@A{\024\342A\232\231\233B\315L\332C\033\236\336=\020z6>R\' >\227V\203=\270@\242>\320~\244=\354QLA\244p\353A3\263\242B3\363\375C\023~\251=\265l-= \230\243<\236\230u<\366\227\035>;\344f=}\256v>\333\371\256?V\016\275?{\024\226A\255\300\020<\305\003J<[\224Y<\000t\030<\371f\233<\363:\342:\205\353]A\000\000\020B33\260B\315\254\024D$\271\374=>\350\331=\2446\261=<\024\205=\020zv>\325\312\204=\370S\025A\037\205\257A=\nlB\000\000\204C6<\275=\257\224e=\031\255#=\372\nR<\304B->.\255\206=\376C\232>\022\203\360?w\276\007@H\341\216A\260=3<\305=\226<\031\255#=\372\nR<\371\367\031=\211|\227;\037\205\035Aff\310A\244p{Bf\346\223C\367\344\341=k\361\251=W\262\243=\372\n\322<\020Xy>\235h\227={\024NA)\\\347A\000\000\245B3\223\000D\352[\246=\021\215n=H\277}=E\360\277<\300[ >\270\314i=\254\255X>{\024\256?\211A\300?\327\243\206A|\322\t<\257_\260<~\251\037=1\261\371;\272\332\212<\373\2207;q=^A\303\365\016B\024\256\261B\315\354\024D#J\373=T\343%>\354\300y>\005\372\204=\217\344r>\360P\224=\327\243$AH\341\334A\nW\203B3\263\240C5\357\270=\372\325\234=\023\270u=\006L\340<\212\037#>@\366z=w-a>\307K\017@\236\357\267?)\\gA]mE<\024\"\340<\227\305D=\374\373\214<\203\372\226<\362\316\241;\244p-A\327\243\013B\327#\213B\315\314\262C\273\270\r>\240\032/>\315\314L>\304\353\272=A\361c>\306\242\251=\\\217\"AR\270\234A\303u\201B\232\331\233C\026j\315=\222\256\231=\301\250\244;o\3306<\376e7>\254\250\201=Z\365y>\217\302\005@\252\361\322?ff\206Aw\204S<\270\006\266<\r\306\210;\037\020\350;\300\262\322<\200J\025;ff*A=\n\267A\217\302\207Bf\246\255C7\211\001>\217\302\365=\301\250$<o\330\266<\371\240g>\177\023\212=\234\304\026A=\n\337A=\nmBf\246\207C\352[\246=\267\234K=\000\000\000\000\000\000\000\000|a2>8-x=\232\231\t?\370S;@P\215g@H\341\350A\374\343=<\372\'8<\000\000\000\000\000\000\000\000r\026\366<w\327Y;\n\327\'A\303\365\010B\000\000\205B\315L\245C\032\300\333=\211\230\222=\000\000\000\000\000\000\000\000\244p}>\241\271\216=\244piA\244p\265A\256\307\300BfF$D\354\206\255=\'1\010><\275\322=\315\006\031=\275\343\024>\367\307{=B\317f>\362\322\215?\004V\016@\354Q\234Az\000\213;q\003>=\252\267\206=C\220\203<Z/\206<5`\220;\024\256wA\366(\332A\315\314\323B\000`7D\363\037\322=\356Z\242>\221~\273>\323M\342=\0358g>\003\354\243=\366(8A\244p\277A=\n\225B\000\300\311CP\252\275=\316\031\321=\323\274\343=\013$(=\226!\016>\271\215\206=\375\207t>#\3339@\331\316\367?\217\302\207AKY\006<\023I\364<J\007k=\325\225O<>\313s<:A\233;\024\256GA\327\243\024B\\\217\244B\232\031\355CK\352\004>\323\336\200>#\333\271>\205\261\305=\320DX>\324\324\262=\315\314`A33\331A\217\302\266B\232\031\026D\216X\313=\324\232\346=v\3036=\266J0=\210c\035>\240\303|=\276\237\272>\333\371\276?\376\3248@R\270\356A\275\303\355;\273a\333<\005\250\251<\2613\205<\303d\252<-\315\255;\315\314tA\024\256\004Bff\310B\315\2540D$(\376=g\325g>K\310\007>b\241\326=fff>\001j\252=333A\303\365\352A\nW\215B\000\000\301C7\216\230=V\274\021=\000\000\000\000\000\000\000\000\207\026\331=\247\\a=\267\321\240>\020Xy@\276\237\002@\341z\266A\027\327\370;\010u\021<\000\000\000\000\000\000\000\000Z\360\242<\002d\350:R\270>A33\031BHa\226B\315\314\333C\305\311\275=\304\010a=\000\000\000\000\000\000\000\000\300[ >j\336q=\037\205sA\303\365\364A\315\314\316B\23293Db\241\326=t\265U>\\\217\202>\036\033\301=>\350Y>\024y\222=\3578\205>q=\232?\002+\027@33\265AP\215\227;\005iF=[\266\226=4\272\203<#\020\257<\325B\311;\366(\214A\366(+B3\263\000C\000\300dD\316\031\021>\332\254J?\217\302\225? Aq>W[\321>\027H\020>)\\\247AR\270\310A\000\000\017C\000`\250D@\023\341=f\367d>A\202\242>\007\360\026>\277\016\\>\306\341\214=\275Rv?\370S\203?\305 \014A\232\231\355B\264\256\321;\240\2110=e\252\240=E\365\326<k\202\250<l\226\313;\354Q\302A\256G\353A\232\0313C\000`\343D\251\023\020>\275R\326>5\357(?\201&\202>\375\366\225>\3642\312=\341z\254A\270\036\263A\000\000\016C\000\340\270D\370S\343=\373\\\355=\354\300y>\315;\016>\016\2760>nQf=+\207\226?\234\304\240?7\211\365@3\263\036CU\301(<\252\324\354<\373\350T=\034\010\311<\214\2046<O\347\212;\232\231\313A33\323A\232\031&C\000`\375DNb\020>\007_X>EG\322>\034\353b>\252\361R>\027\267\221==\n\241A\000\000\342A33\003C\000\240\235D^K\310=a\303\323=\274t\023>\n\205\310=\241g3>\266\241b=\317\367C?\313\241\035@\372~\246@{\024\306B\341\t\275;\376}\306<\301\312!=6v\211<\362{\233<|\265#;\037\205\275A\000\000\031B\000\000\033C\000`\330D\373\313\356=\024\320D>\246\233\244>\013\265&>\270\257\203>\377\354\207=\315\314\204A\327\243\340A\232\231\330Bf\206VD\215(\255=\252\202\321=\342u\275=\200+Y=\345\320\">\223Wg=C\255\351>\232\231\211?33[@33BB\364m\301;_\322\030=\245\275A=P\031\177<\355\360W<\355\020\177;\n\327\227A\341z\010Bff\375B\000\200\214DgD\351=\255i\236>\315;\256>\0054\021>\212\037c>R\'\240=\315\314\244A\327\243\352A\232\031\014C\000 \236D A\361=\362\322\215>\263\352\263>\343\245\033>\353su>\014\260\217=#\3339?\366(\314?9\264\270@\244p\254B\200\266\325;O;|=\224\301\221=\234P\210<\320a\276<\212\253\312;\205\353\315A\024\256\035B\232\2318C\000\240\343D\303\365(>\315;^?\245Np?\024\256\207> A\321>\266\363\375=\354Q\370@\354Q\304A\024\256?B\000\0005C\216\222W=\343\2522=\000\000\000\000\000\000\000\000A\202\">6\002q=xz\305>\264\310\266?o\022#@33\231A\264\221\353;\352\262\230;\000\000\000\000\000\000\000\000\3127\333<\376b6;\307K\027A\303\365\362A\327\243lB\315L\206C\363<\270=\036\371\203=\000\000\000\000\000\000\000\000\305\376\222>\242(\220="
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 458
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  op: "Identity"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\312\001\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/unpack"
  op: "Unpack"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.387298345566
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.387298345566
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction/Cast"
  op: "Cast"
  input: "zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "zero_fraction/Mean"
  op: "Mean"
  input: "zero_fraction/Cast"
  input: "zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  input: "zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0_activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0_activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0_activation/tag"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\312\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/unpack"
  op: "Unpack"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.447213590145
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.447213590145
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_1/Cast"
  op: "Cast"
  input: "zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "zero_fraction_1/Mean"
  op: "Mean"
  input: "zero_fraction_1/Cast"
  input: "zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  input: "zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1_activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1_activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1_activation/tag"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\312\001\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/unpack"
  op: "Unpack"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.447213590145
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.447213590145
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_2/Cast"
  op: "Cast"
  input: "zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "zero_fraction_2/Mean"
  op: "Mean"
  input: "zero_fraction_2/Cast"
  input: "zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_2_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  input: "zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_2_activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2_activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_2_activation/tag"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/logits/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\312\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/logits/unpack"
  op: "Unpack"
  input: "dnn/logits/logits/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/logits/weights/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.679366230965
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.679366230965
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/read"
  op: "Identity"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights"
  op: "Identity"
  input: "dnn/logits/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/biases/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "dnn/logits/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/read"
  op: "Identity"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/biases"
  op: "Identity"
  input: "dnn/logits/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/logits/MatMul"
  input: "dnn/logits/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "zero_fraction_3/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zero_fraction_3/Equal"
  op: "Equal"
  input: "dnn/logits/logits/BiasAdd"
  input: "zero_fraction_3/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_3/Cast"
  op: "Cast"
  input: "zero_fraction_3/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "zero_fraction_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "zero_fraction_3/Mean"
  op: "Mean"
  input: "zero_fraction_3/Cast"
  input: "zero_fraction_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits_fraction_of_zero_values/tags"
  input: "zero_fraction_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits_activation"
      }
    }
  }
}
node {
  name: "dnn/logits_activation"
  op: "HistogramSummary"
  input: "dnn/logits_activation/tag"
  input: "dnn/logits/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Softmax"
  op: "Softmax"
  input: "dnn/logits/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "dnn/logits/logits/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/logits/BiasAdd"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training_loss"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "training_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/logits/BiasAdd"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training_loss_1"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_1"
      }
    }
  }
}
node {
  name: "loss_1"
  op: "ScalarSummary"
  input: "loss_1/tags"
  input: "training_loss_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/learning_rate"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0500000007451
      }
    }
  }
}
node {
  name: "dnn/learning_rate/Assign"
  op: "Assign"
  input: "dnn/learning_rate"
  input: "dnn/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/learning_rate/read"
  op: "Identity"
  input: "dnn/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/gradients/Fill"
  op: "Fill"
  input: "dnn/gradients/Shape"
  input: "dnn/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/Fill"
  input: "dnn/gradients/training_loss_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Tile"
  op: "Tile"
  input: "dnn/gradients/training_loss_1_grad/Reshape"
  input: "dnn/gradients/training_loss_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Prod"
  op: "Prod"
  input: "dnn/gradients/training_loss_1_grad/Shape"
  input: "dnn/gradients/training_loss_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Prod_1"
  op: "Prod"
  input: "dnn/gradients/training_loss_1_grad/Shape_1"
  input: "dnn/gradients/training_loss_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Maximum"
  op: "Maximum"
  input: "dnn/gradients/training_loss_1_grad/Prod_1"
  input: "dnn/gradients/training_loss_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/floordiv"
  op: "Div"
  input: "dnn/gradients/training_loss_1_grad/Prod"
  input: "dnn/gradients/training_loss_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/Cast"
  op: "Cast"
  input: "dnn/gradients/training_loss_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/training_loss_1_grad/truediv"
  op: "Div"
  input: "dnn/gradients/training_loss_1_grad/Tile"
  input: "dnn/gradients/training_loss_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/zeros_like"
  op: "ZerosLike"
  input: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "dnn/gradients/training_loss_1_grad/truediv"
  input: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "^dnn/gradients/dnn/logits/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "^dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/weights/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/biases/part_0/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/weights/part_0"
  input: "dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/logits/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/biases/part_0"
  input: "dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/learning_rate/read"
  input: "dnn/gradients/dnn/logits/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/train/update"
  op: "NoOp"
  input: "^dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
  input: "^dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
}
node {
  name: "dnn/train/value"
  op: "Const"
  input: "^dnn/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/train"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/control_dependency"
  op: "Identity"
  input: "training_loss_1"
  input: "^dnn/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training_loss_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Softmax_1"
  op: "Softmax"
  input: "dnn/logits/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "dnn/logits/logits/BiasAdd"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax_1"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "accuracy/ToFloat_1"
  op: "Cast"
  input: "accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "ToFloat_1"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater"
  op: "Greater"
  input: "accuracy/count/read"
  input: "accuracy/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/truediv"
  op: "Div"
  input: "accuracy/total/read"
  input: "accuracy/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "Select"
  input: "accuracy/Greater"
  input: "accuracy/truediv"
  input: "accuracy/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Greater_1/y"
  op: "Const"
  input: "^accuracy/AssignAdd"
  input: "^accuracy/AssignAdd_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater_1"
  op: "Greater"
  input: "accuracy/count/read"
  input: "accuracy/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/truediv_1"
  op: "Div"
  input: "accuracy/total/read"
  input: "accuracy/count/read"
  input: "^accuracy/AssignAdd"
  input: "^accuracy/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op/e"
  op: "Const"
  input: "^accuracy/AssignAdd"
  input: "^accuracy/AssignAdd_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "Select"
  input: "accuracy/Greater_1"
  input: "accuracy/truediv_1"
  input: "accuracy/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_2/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 458
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_2/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/logits/BiasAdd"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 458
          }
        }
        shape {
          dim {
            size: 458
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "eval_loss"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits_2/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/total"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mean/total/Assign"
  op: "Assign"
  input: "mean/total"
  input: "mean/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mean/total/read"
  op: "Identity"
  input: "mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/count"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mean/count/Assign"
  op: "Assign"
  input: "mean/count"
  input: "mean/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mean/count/read"
  op: "Identity"
  input: "mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mean/ToFloat_1"
  op: "Cast"
  input: "mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean/Sum"
  op: "Sum"
  input: "eval_loss"
  input: "mean/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean/AssignAdd"
  op: "AssignAdd"
  input: "mean/total"
  input: "mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mean/AssignAdd_1"
  op: "AssignAdd"
  input: "mean/count"
  input: "mean/ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mean/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/Greater"
  op: "Greater"
  input: "mean/count/read"
  input: "mean/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/truediv"
  op: "Div"
  input: "mean/total/read"
  input: "mean/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/value"
  op: "Select"
  input: "mean/Greater"
  input: "mean/truediv"
  input: "mean/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/Greater_1/y"
  op: "Const"
  input: "^mean/AssignAdd"
  input: "^mean/AssignAdd_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/Greater_1"
  op: "Greater"
  input: "mean/count/read"
  input: "mean/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/truediv_1"
  op: "Div"
  input: "mean/total/read"
  input: "mean/count/read"
  input: "^mean/AssignAdd"
  input: "^mean/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean/update_op/e"
  op: "Const"
  input: "^mean/AssignAdd"
  input: "^mean/AssignAdd_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean/update_op"
  op: "Select"
  input: "mean/Greater_1"
  input: "mean/truediv_1"
  input: "mean/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^dnn/hiddenlayer_0/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_0/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_1/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_1/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_2/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_2/biases/part_0/Assign"
  input: "^dnn/logits/weights/part_0/Assign"
  input: "^dnn/logits/biases/part_0/Assign"
  input: "^dnn/learning_rate/Assign"
  input: "^dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/biases/part_0/Adagrad/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/pack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/pack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/weights/part_0"
        string_val: "dnn/hiddenlayer_0/biases/part_0"
        string_val: "dnn/hiddenlayer_1/weights/part_0"
        string_val: "dnn/hiddenlayer_1/biases/part_0"
        string_val: "dnn/hiddenlayer_2/weights/part_0"
        string_val: "dnn/hiddenlayer_2/biases/part_0"
        string_val: "dnn/logits/weights/part_0"
        string_val: "dnn/logits/biases/part_0"
        string_val: "dnn/learning_rate"
        string_val: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/dnn/logits/weights/part_0/Adagrad"
        string_val: "dnn/dnn/logits/biases/part_0/Adagrad"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
        string_val: "mean/total"
        string_val: "mean/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "Concat"
  input: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "Concat"
  input: "concat/concat_dim"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/total/Assign"
  input: "^accuracy/count/Assign"
  input: "^mean/total/Assign"
  input: "^mean/count/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0_fraction_of_zero_values"
  input: "dnn/hiddenlayer_0_activation"
  input: "dnn/hiddenlayer_1_fraction_of_zero_values"
  input: "dnn/hiddenlayer_1_activation"
  input: "dnn/hiddenlayer_2_fraction_of_zero_values"
  input: "dnn/hiddenlayer_2_activation"
  input: "dnn/logits_fraction_of_zero_values"
  input: "dnn/logits_activation"
  input: "loss"
  input: "loss_1"
  attr {
    key: "N"
    value {
      i: 10
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/Const"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "dnn/hiddenlayer_0/biases"
        string_val: "dnn/hiddenlayer_0/biases/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/weights"
        string_val: "dnn/hiddenlayer_0/weights/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/biases"
        string_val: "dnn/hiddenlayer_1/biases/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/weights"
        string_val: "dnn/hiddenlayer_1/weights/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/biases"
        string_val: "dnn/hiddenlayer_2/biases/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/weights"
        string_val: "dnn/hiddenlayer_2/weights/t_0/Adagrad"
        string_val: "dnn/learning_rate"
        string_val: "dnn/logits/biases"
        string_val: "dnn/logits/biases/t_0/Adagrad"
        string_val: "dnn/logits/weights"
        string_val: "dnn/logits/weights/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "30 10 0,30:0,10"
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "10 20 0,10:0,20"
        string_val: "10 20 0,10:0,20"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "20 10 0,20:0,10"
        string_val: "20 10 0,20:0,10"
        string_val: ""
        string_val: "3 0,3"
        string_val: "3 0,3"
        string_val: "10 3 0,10:0,3"
        string_val: "10 3 0,10:0,3"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/ShardedFilename"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  input: "dnn/learning_rate"
  input: "dnn/logits/biases/part_0/read"
  input: "dnn/dnn/logits/biases/part_0/Adagrad/read"
  input: "dnn/logits/weights/part_0/read"
  input: "dnn/dnn/logits/weights/part_0/Adagrad/read"
  input: "global_step"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilespec"
  op: "ShardedFilespec"
  input: "save/Const"
  input: "save/num_shards"
  input: "^save/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/biases/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "30 10 0,30:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/weights/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "30 10 0,30:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/biases/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 20 0,10:0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/weights/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 20 0,10:0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/biases/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 10 0,20:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/weights/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 10 0,20:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dnn/learning_rate"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "3 0,3"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/biases/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "3 0,3"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dnn/dnn/logits/biases/part_0/Adagrad"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 3 0,10:0,3"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/weights/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 3 0,10:0,3"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dnn/dnn/logits/weights/part_0/Adagrad"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 17
}
